// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrecomputedParametricShape.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PrecomputedParametricShape.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OptCAD {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* PrecomputedParametricShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrecomputedParametricShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrecomputedSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrecomputedSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionTestShapeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionTestShapeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector4i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector4i_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundaryConditionValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundaryConditionValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundaryCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundaryCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrecomputedPhysics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrecomputedPhysics_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferencePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferencePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlLoop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlLoop_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundaryControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundaryControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* TetMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TetMesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasisFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasisFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearBSpline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearBSpline_reflection_ = NULL;
const ::google::protobuf::Descriptor* CubicBSpline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CubicBSpline_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdaptiveGridCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdaptiveGridCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdaptiveGridLeaf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdaptiveGridLeaf_reflection_ = NULL;
const ::google::protobuf::Descriptor* HomeomorphicSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HomeomorphicSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdaptiveGridInterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdaptiveGridInterNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BoundaryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PrecomputedParametricShape_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PrecomputedParametricShape_2eproto() {
  protobuf_AddDesc_PrecomputedParametricShape_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PrecomputedParametricShape.proto");
  GOOGLE_CHECK(file != NULL);
  PrecomputedParametricShape_descriptor_ = file->message_type(0);
  static const int PrecomputedParametricShape_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedParametricShape, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedParametricShape, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedParametricShape, bootstrapnsamples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedParametricShape, bordercells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedParametricShape, range_),
  };
  PrecomputedParametricShape_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrecomputedParametricShape_descriptor_,
      PrecomputedParametricShape::internal_default_instance(),
      PrecomputedParametricShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedParametricShape, _has_bits_),
      -1,
      -1,
      sizeof(PrecomputedParametricShape),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedParametricShape, _internal_metadata_));
  PrecomputedSample_descriptor_ = file->message_type(1);
  static const int PrecomputedSample_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedSample, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedSample, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedSample, shapeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedSample, basisfuntions_),
  };
  PrecomputedSample_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrecomputedSample_descriptor_,
      PrecomputedSample::internal_default_instance(),
      PrecomputedSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedSample, _has_bits_),
      -1,
      -1,
      sizeof(PrecomputedSample),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedSample, _internal_metadata_));
  FunctionTestShapeInfo_descriptor_ = file->message_type(2);
  static const int FunctionTestShapeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionTestShapeInfo, val_),
  };
  FunctionTestShapeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FunctionTestShapeInfo_descriptor_,
      FunctionTestShapeInfo::internal_default_instance(),
      FunctionTestShapeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionTestShapeInfo, _has_bits_),
      -1,
      -1,
      sizeof(FunctionTestShapeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionTestShapeInfo, _internal_metadata_));
  Vector4i_descriptor_ = file->message_type(3);
  static const int Vector4i_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4i, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4i, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4i, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4i, w_),
  };
  Vector4i_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector4i_descriptor_,
      Vector4i::internal_default_instance(),
      Vector4i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4i, _has_bits_),
      -1,
      -1,
      sizeof(Vector4i),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4i, _internal_metadata_));
  Vector3d_descriptor_ = file->message_type(4);
  static const int Vector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, z_),
  };
  Vector3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3d_descriptor_,
      Vector3d::internal_default_instance(),
      Vector3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _has_bits_),
      -1,
      -1,
      sizeof(Vector3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _internal_metadata_));
  BoundaryConditionValue_descriptor_ = file->message_type(5);
  static const int BoundaryConditionValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryConditionValue, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryConditionValue, heatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryConditionValue, boundarytype_),
  };
  BoundaryConditionValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoundaryConditionValue_descriptor_,
      BoundaryConditionValue::internal_default_instance(),
      BoundaryConditionValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryConditionValue, _has_bits_),
      -1,
      -1,
      sizeof(BoundaryConditionValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryConditionValue, _internal_metadata_));
  BoundaryCondition_descriptor_ = file->message_type(6);
  static const int BoundaryCondition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryCondition, isfixed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryCondition, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryCondition, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryCondition, value_),
  };
  BoundaryCondition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoundaryCondition_descriptor_,
      BoundaryCondition::internal_default_instance(),
      BoundaryCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryCondition, _has_bits_),
      -1,
      -1,
      sizeof(BoundaryCondition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryCondition, _internal_metadata_));
  PrecomputedPhysics_descriptor_ = file->message_type(7);
  static const int PrecomputedPhysics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedPhysics, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedPhysics, values_),
  };
  PrecomputedPhysics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrecomputedPhysics_descriptor_,
      PrecomputedPhysics::internal_default_instance(),
      PrecomputedPhysics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedPhysics, _has_bits_),
      -1,
      -1,
      sizeof(PrecomputedPhysics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrecomputedPhysics, _internal_metadata_));
  ReferencePoint_descriptor_ = file->message_type(8);
  static const int ReferencePoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferencePoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferencePoint, pos_),
  };
  ReferencePoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReferencePoint_descriptor_,
      ReferencePoint::internal_default_instance(),
      ReferencePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferencePoint, _has_bits_),
      -1,
      -1,
      sizeof(ReferencePoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferencePoint, _internal_metadata_));
  Link_descriptor_ = file->message_type(9);
  static const int Link_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, midpoints_),
  };
  Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Link_descriptor_,
      Link::internal_default_instance(),
      Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _has_bits_),
      -1,
      -1,
      sizeof(Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_));
  ControlLoop_descriptor_ = file->message_type(10);
  static const int ControlLoop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlLoop, loop_),
  };
  ControlLoop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlLoop_descriptor_,
      ControlLoop::internal_default_instance(),
      ControlLoop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlLoop, _has_bits_),
      -1,
      -1,
      sizeof(ControlLoop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlLoop, _internal_metadata_));
  BoundaryControl_descriptor_ = file->message_type(11);
  static const int BoundaryControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryControl, controlloops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryControl, value_),
  };
  BoundaryControl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoundaryControl_descriptor_,
      BoundaryControl::internal_default_instance(),
      BoundaryControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryControl, _has_bits_),
      -1,
      -1,
      sizeof(BoundaryControl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryControl, _internal_metadata_));
  ControlPoints_descriptor_ = file->message_type(12);
  static const int ControlPoints_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoints, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoints, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoints, boundarycontrols_),
  };
  ControlPoints_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlPoints_descriptor_,
      ControlPoints::internal_default_instance(),
      ControlPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoints, _has_bits_),
      -1,
      -1,
      sizeof(ControlPoints),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoints, _internal_metadata_));
  TetMesh_descriptor_ = file->message_type(13);
  static const int TetMesh_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TetMesh, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TetMesh, tets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TetMesh, boundaryconditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TetMesh, precomputedphysics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TetMesh, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TetMesh, controlpoints_),
  };
  TetMesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TetMesh_descriptor_,
      TetMesh::internal_default_instance(),
      TetMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TetMesh, _has_bits_),
      -1,
      -1,
      sizeof(TetMesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TetMesh, _internal_metadata_));
  ShapeInfo_descriptor_ = file->message_type(14);
  static const int ShapeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeInfo, functionshapeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeInfo, tetmesh_),
  };
  ShapeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShapeInfo_descriptor_,
      ShapeInfo::internal_default_instance(),
      ShapeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeInfo, _has_bits_),
      -1,
      -1,
      sizeof(ShapeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeInfo, _internal_metadata_));
  BasisFunction_descriptor_ = file->message_type(15);
  static const int BasisFunction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasisFunction, linearbspline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasisFunction, cubicbspline_),
  };
  BasisFunction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BasisFunction_descriptor_,
      BasisFunction::internal_default_instance(),
      BasisFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasisFunction, _has_bits_),
      -1,
      -1,
      sizeof(BasisFunction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasisFunction, _internal_metadata_));
  LinearBSpline_descriptor_ = file->message_type(16);
  static const int LinearBSpline_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBSpline, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBSpline, support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBSpline, weight_),
  };
  LinearBSpline_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LinearBSpline_descriptor_,
      LinearBSpline::internal_default_instance(),
      LinearBSpline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBSpline, _has_bits_),
      -1,
      -1,
      sizeof(LinearBSpline),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearBSpline, _internal_metadata_));
  CubicBSpline_descriptor_ = file->message_type(17);
  static const int CubicBSpline_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBSpline, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBSpline, support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBSpline, weight_),
  };
  CubicBSpline_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CubicBSpline_descriptor_,
      CubicBSpline::internal_default_instance(),
      CubicBSpline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBSpline, _has_bits_),
      -1,
      -1,
      sizeof(CubicBSpline),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubicBSpline, _internal_metadata_));
  AdaptiveGridCell_descriptor_ = file->message_type(18);
  static const int AdaptiveGridCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridCell, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridCell, leaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridCell, internode_),
  };
  AdaptiveGridCell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdaptiveGridCell_descriptor_,
      AdaptiveGridCell::internal_default_instance(),
      AdaptiveGridCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridCell, _has_bits_),
      -1,
      -1,
      sizeof(AdaptiveGridCell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridCell, _internal_metadata_));
  AdaptiveGridLeaf_descriptor_ = file->message_type(19);
  static const int AdaptiveGridLeaf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridLeaf, centershapeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridLeaf, homeomorphicsamples_),
  };
  AdaptiveGridLeaf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdaptiveGridLeaf_descriptor_,
      AdaptiveGridLeaf::internal_default_instance(),
      AdaptiveGridLeaf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridLeaf, _has_bits_),
      -1,
      -1,
      sizeof(AdaptiveGridLeaf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridLeaf, _internal_metadata_));
  HomeomorphicSample_descriptor_ = file->message_type(20);
  static const int HomeomorphicSample_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeomorphicSample, precomputedsampleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeomorphicSample, shapeinfo_),
  };
  HomeomorphicSample_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HomeomorphicSample_descriptor_,
      HomeomorphicSample::internal_default_instance(),
      HomeomorphicSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeomorphicSample, _has_bits_),
      -1,
      -1,
      sizeof(HomeomorphicSample),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeomorphicSample, _internal_metadata_));
  AdaptiveGridInterNode_descriptor_ = file->message_type(21);
  static const int AdaptiveGridInterNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridInterNode, child1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridInterNode, child2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridInterNode, spliddirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridInterNode, splitval_),
  };
  AdaptiveGridInterNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdaptiveGridInterNode_descriptor_,
      AdaptiveGridInterNode::internal_default_instance(),
      AdaptiveGridInterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridInterNode, _has_bits_),
      -1,
      -1,
      sizeof(AdaptiveGridInterNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveGridInterNode, _internal_metadata_));
  BoundaryType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PrecomputedParametricShape_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrecomputedParametricShape_descriptor_, PrecomputedParametricShape::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrecomputedSample_descriptor_, PrecomputedSample::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FunctionTestShapeInfo_descriptor_, FunctionTestShapeInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector4i_descriptor_, Vector4i::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3d_descriptor_, Vector3d::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoundaryConditionValue_descriptor_, BoundaryConditionValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoundaryCondition_descriptor_, BoundaryCondition::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrecomputedPhysics_descriptor_, PrecomputedPhysics::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReferencePoint_descriptor_, ReferencePoint::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Link_descriptor_, Link::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlLoop_descriptor_, ControlLoop::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoundaryControl_descriptor_, BoundaryControl::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlPoints_descriptor_, ControlPoints::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TetMesh_descriptor_, TetMesh::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShapeInfo_descriptor_, ShapeInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BasisFunction_descriptor_, BasisFunction::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LinearBSpline_descriptor_, LinearBSpline::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CubicBSpline_descriptor_, CubicBSpline::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdaptiveGridCell_descriptor_, AdaptiveGridCell::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdaptiveGridLeaf_descriptor_, AdaptiveGridLeaf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HomeomorphicSample_descriptor_, HomeomorphicSample::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdaptiveGridInterNode_descriptor_, AdaptiveGridInterNode::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PrecomputedParametricShape_2eproto() {
  PrecomputedParametricShape_default_instance_.Shutdown();
  delete PrecomputedParametricShape_reflection_;
  PrecomputedSample_default_instance_.Shutdown();
  delete PrecomputedSample_reflection_;
  FunctionTestShapeInfo_default_instance_.Shutdown();
  delete FunctionTestShapeInfo_reflection_;
  Vector4i_default_instance_.Shutdown();
  delete Vector4i_reflection_;
  Vector3d_default_instance_.Shutdown();
  delete Vector3d_reflection_;
  BoundaryConditionValue_default_instance_.Shutdown();
  delete BoundaryConditionValue_reflection_;
  BoundaryCondition_default_instance_.Shutdown();
  delete BoundaryCondition_reflection_;
  PrecomputedPhysics_default_instance_.Shutdown();
  delete PrecomputedPhysics_reflection_;
  ReferencePoint_default_instance_.Shutdown();
  delete ReferencePoint_reflection_;
  Link_default_instance_.Shutdown();
  delete Link_reflection_;
  ControlLoop_default_instance_.Shutdown();
  delete ControlLoop_reflection_;
  BoundaryControl_default_instance_.Shutdown();
  delete BoundaryControl_reflection_;
  ControlPoints_default_instance_.Shutdown();
  delete ControlPoints_reflection_;
  TetMesh_default_instance_.Shutdown();
  delete TetMesh_reflection_;
  ShapeInfo_default_instance_.Shutdown();
  delete ShapeInfo_reflection_;
  BasisFunction_default_instance_.Shutdown();
  delete BasisFunction_reflection_;
  LinearBSpline_default_instance_.Shutdown();
  delete LinearBSpline_reflection_;
  CubicBSpline_default_instance_.Shutdown();
  delete CubicBSpline_reflection_;
  AdaptiveGridCell_default_instance_.Shutdown();
  delete AdaptiveGridCell_reflection_;
  AdaptiveGridLeaf_default_instance_.Shutdown();
  delete AdaptiveGridLeaf_reflection_;
  HomeomorphicSample_default_instance_.Shutdown();
  delete HomeomorphicSample_reflection_;
  AdaptiveGridInterNode_default_instance_.Shutdown();
  delete AdaptiveGridInterNode_reflection_;
}

void protobuf_InitDefaults_PrecomputedParametricShape_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  PrecomputedParametricShape_default_instance_.DefaultConstruct();
  PrecomputedSample_default_instance_.DefaultConstruct();
  FunctionTestShapeInfo_default_instance_.DefaultConstruct();
  Vector4i_default_instance_.DefaultConstruct();
  Vector3d_default_instance_.DefaultConstruct();
  BoundaryConditionValue_default_instance_.DefaultConstruct();
  BoundaryCondition_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PrecomputedPhysics_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReferencePoint_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Link_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ControlLoop_default_instance_.DefaultConstruct();
  BoundaryControl_default_instance_.DefaultConstruct();
  ControlPoints_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TetMesh_default_instance_.DefaultConstruct();
  ShapeInfo_default_instance_.DefaultConstruct();
  BasisFunction_default_instance_.DefaultConstruct();
  LinearBSpline_default_instance_.DefaultConstruct();
  CubicBSpline_default_instance_.DefaultConstruct();
  AdaptiveGridCell_default_instance_.DefaultConstruct();
  AdaptiveGridLeaf_default_instance_.DefaultConstruct();
  HomeomorphicSample_default_instance_.DefaultConstruct();
  AdaptiveGridInterNode_default_instance_.DefaultConstruct();
  PrecomputedParametricShape_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrecomputedSample_default_instance_.get_mutable()->InitAsDefaultInstance();
  FunctionTestShapeInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector4i_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector3d_default_instance_.get_mutable()->InitAsDefaultInstance();
  BoundaryConditionValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  BoundaryCondition_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrecomputedPhysics_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReferencePoint_default_instance_.get_mutable()->InitAsDefaultInstance();
  Link_default_instance_.get_mutable()->InitAsDefaultInstance();
  ControlLoop_default_instance_.get_mutable()->InitAsDefaultInstance();
  BoundaryControl_default_instance_.get_mutable()->InitAsDefaultInstance();
  ControlPoints_default_instance_.get_mutable()->InitAsDefaultInstance();
  TetMesh_default_instance_.get_mutable()->InitAsDefaultInstance();
  ShapeInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  BasisFunction_default_instance_.get_mutable()->InitAsDefaultInstance();
  LinearBSpline_default_instance_.get_mutable()->InitAsDefaultInstance();
  CubicBSpline_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdaptiveGridCell_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdaptiveGridLeaf_default_instance_.get_mutable()->InitAsDefaultInstance();
  HomeomorphicSample_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdaptiveGridInterNode_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PrecomputedParametricShape_2eproto_once_);
void protobuf_InitDefaults_PrecomputedParametricShape_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PrecomputedParametricShape_2eproto_once_,
                 &protobuf_InitDefaults_PrecomputedParametricShape_2eproto_impl);
}
void protobuf_AddDesc_PrecomputedParametricShape_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n PrecomputedParametricShape.proto\022\014OptC"
    "AD.proto\"\333\001\n\032PrecomputedParametricShape\022"
    ",\n\004root\030\001 \001(\0132\036.OptCAD.proto.AdaptiveGri"
    "dCell\0220\n\007samples\030\002 \003(\0132\037.OptCAD.proto.Pr"
    "ecomputedSample\022\031\n\021bootstrapNSamples\030\003 \001"
    "(\005\0223\n\013borderCells\030\004 \003(\0132\036.OptCAD.proto.A"
    "daptiveGridCell\022\r\n\005range\030\005 \003(\001\"\217\001\n\021Preco"
    "mputedSample\022\n\n\002id\030\001 \001(\005\022\016\n\006center\030\002 \003(\001"
    "\022*\n\tshapeInfo\030\003 \001(\0132\027.OptCAD.proto.Shape"
    "Info\0222\n\rbasisFuntions\030\004 \003(\0132\033.OptCAD.pro"
    "to.BasisFunction\"$\n\025FunctionTestShapeInf"
    "o\022\013\n\003val\030\001 \001(\001\"6\n\010Vector4i\022\t\n\001x\030\001 \001(\005\022\t\n"
    "\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\022\t\n\001w\030\004 \001(\005\"+\n\010Vector"
    "3d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\204\001\n\026"
    "BoundaryConditionValue\022%\n\005force\030\001 \001(\0132\026."
    "OptCAD.proto.Vector3d\022\021\n\theatValue\030\002 \001(\001"
    "\0220\n\014boundaryType\030\003 \001(\0162\032.OptCAD.proto.Bo"
    "undaryType\"\222\001\n\021BoundaryCondition\022\017\n\007isFi"
    "xed\030\001 \001(\010\022%\n\005force\030\002 \001(\0132\026.OptCAD.proto."
    "Vector3d\022\020\n\010vertices\030\003 \003(\005\0223\n\005value\030\004 \001("
    "\0132$.OptCAD.proto.BoundaryConditionValue\""
    "2\n\022PrecomputedPhysics\022\014\n\004name\030\001 \001(\t\022\016\n\006v"
    "alues\030\002 \003(\001\"A\n\016ReferencePoint\022\n\n\002id\030\001 \001("
    "\t\022#\n\003pos\030\002 \001(\0132\026.OptCAD.proto.Vector3d\"P"
    "\n\004Link\022\r\n\005first\030\001 \001(\t\022\016\n\006second\030\002 \001(\t\022)\n"
    "\tmidPoints\030\003 \003(\0132\026.OptCAD.proto.Vector3d"
    "\"\033\n\013ControlLoop\022\014\n\004loop\030\001 \003(\t\"w\n\017Boundar"
    "yControl\022/\n\014controlLoops\030\001 \003(\0132\031.OptCAD."
    "proto.ControlLoop\0223\n\005value\030\002 \001(\0132$.OptCA"
    "D.proto.BoundaryConditionValue\"\230\001\n\rContr"
    "olPoints\022+\n\005point\030\001 \003(\0132\034.OptCAD.proto.R"
    "eferencePoint\022!\n\005links\030\002 \003(\0132\022.OptCAD.pr"
    "oto.Link\0227\n\020boundaryControls\030\003 \003(\0132\035.Opt"
    "CAD.proto.BoundaryControl\"\232\002\n\007TetMesh\022(\n"
    "\010vertices\030\001 \003(\0132\026.OptCAD.proto.Vector3d\022"
    "$\n\004tets\030\002 \003(\0132\026.OptCAD.proto.Vector4i\022;\n"
    "\022boundaryConditions\030\003 \003(\0132\037.OptCAD.proto"
    ".BoundaryCondition\022<\n\022precomputedPhysics"
    "\030\004 \003(\0132 .OptCAD.proto.PrecomputedPhysics"
    "\022\020\n\010filename\030\005 \001(\t\0222\n\rcontrolPoints\030\006 \001("
    "\0132\033.OptCAD.proto.ControlPoints\"s\n\tShapeI"
    "nfo\022>\n\021functionShapeInfo\030\001 \001(\0132#.OptCAD."
    "proto.FunctionTestShapeInfo\022&\n\007tetMesh\030\002"
    " \001(\0132\025.OptCAD.proto.TetMesh\"u\n\rBasisFunc"
    "tion\0222\n\rlinearBspline\030\001 \001(\0132\033.OptCAD.pro"
    "to.LinearBSpline\0220\n\014cubicBspline\030\002 \001(\0132\032"
    ".OptCAD.proto.CubicBSpline\"@\n\rLinearBSpl"
    "ine\022\016\n\006center\030\001 \003(\001\022\017\n\007support\030\002 \003(\001\022\016\n\006"
    "weight\030\003 \001(\001\"\?\n\014CubicBSpline\022\016\n\006center\030\001"
    " \003(\001\022\017\n\007support\030\002 \003(\001\022\016\n\006weight\030\003 \001(\001\"\210\001"
    "\n\020AdaptiveGridCell\022\016\n\006ranges\030\001 \003(\001\022,\n\004le"
    "af\030\002 \001(\0132\036.OptCAD.proto.AdaptiveGridLeaf"
    "\0226\n\tinterNode\030\003 \001(\0132#.OptCAD.proto.Adapt"
    "iveGridInterNode\"\203\001\n\020AdaptiveGridLeaf\0220\n"
    "\017centerShapeInfo\030\001 \001(\0132\027.OptCAD.proto.Sh"
    "apeInfo\022=\n\023homeomorphicSamples\030\002 \003(\0132 .O"
    "ptCAD.proto.HomeomorphicSample\"]\n\022Homeom"
    "orphicSample\022\033\n\023precomputedSampleID\030\001 \001("
    "\005\022*\n\tshapeInfo\030\002 \001(\0132\027.OptCAD.proto.Shap"
    "eInfo\"\241\001\n\025AdaptiveGridInterNode\022.\n\006child"
    "1\030\001 \001(\0132\036.OptCAD.proto.AdaptiveGridCell\022"
    ".\n\006child2\030\002 \001(\0132\036.OptCAD.proto.AdaptiveG"
    "ridCell\022\026\n\016splidDirection\030\003 \001(\005\022\020\n\010split"
    "Val\030\004 \001(\001*I\n\014BoundaryType\022\022\n\016FIXED_BOUND"
    "ARY\020\000\022\022\n\016BOUNDARY_FORCE\020\001\022\021\n\rBOUNDARY_HE"
    "AT\020\002", 2604);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PrecomputedParametricShape.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PrecomputedParametricShape_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PrecomputedParametricShape_2eproto_once_);
void protobuf_AddDesc_PrecomputedParametricShape_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PrecomputedParametricShape_2eproto_once_,
                 &protobuf_AddDesc_PrecomputedParametricShape_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PrecomputedParametricShape_2eproto {
  StaticDescriptorInitializer_PrecomputedParametricShape_2eproto() {
    protobuf_AddDesc_PrecomputedParametricShape_2eproto();
  }
} static_descriptor_initializer_PrecomputedParametricShape_2eproto_;
const ::google::protobuf::EnumDescriptor* BoundaryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundaryType_descriptor_;
}
bool BoundaryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecomputedParametricShape::kRootFieldNumber;
const int PrecomputedParametricShape::kSamplesFieldNumber;
const int PrecomputedParametricShape::kBootstrapNSamplesFieldNumber;
const int PrecomputedParametricShape::kBorderCellsFieldNumber;
const int PrecomputedParametricShape::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecomputedParametricShape::PrecomputedParametricShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.PrecomputedParametricShape)
}

void PrecomputedParametricShape::InitAsDefaultInstance() {
  root_ = const_cast< ::OptCAD::proto::AdaptiveGridCell*>(
      ::OptCAD::proto::AdaptiveGridCell::internal_default_instance());
}

PrecomputedParametricShape::PrecomputedParametricShape(const PrecomputedParametricShape& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.PrecomputedParametricShape)
}

void PrecomputedParametricShape::SharedCtor() {
  _cached_size_ = 0;
  root_ = NULL;
  bootstrapnsamples_ = 0;
}

PrecomputedParametricShape::~PrecomputedParametricShape() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.PrecomputedParametricShape)
  SharedDtor();
}

void PrecomputedParametricShape::SharedDtor() {
  if (this != &PrecomputedParametricShape_default_instance_.get()) {
    delete root_;
  }
}

void PrecomputedParametricShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrecomputedParametricShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrecomputedParametricShape_descriptor_;
}

const PrecomputedParametricShape& PrecomputedParametricShape::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrecomputedParametricShape> PrecomputedParametricShape_default_instance_;

PrecomputedParametricShape* PrecomputedParametricShape::New(::google::protobuf::Arena* arena) const {
  PrecomputedParametricShape* n = new PrecomputedParametricShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecomputedParametricShape::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.PrecomputedParametricShape)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_root()) {
      if (root_ != NULL) root_->::OptCAD::proto::AdaptiveGridCell::Clear();
    }
    bootstrapnsamples_ = 0;
  }
  samples_.Clear();
  bordercells_.Clear();
  range_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PrecomputedParametricShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.PrecomputedParametricShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OptCAD.proto.AdaptiveGridCell root = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_samples;
        break;
      }

      // repeated .OptCAD.proto.PrecomputedSample samples = 2;
      case 2: {
        if (tag == 18) {
         parse_samples:
          DO_(input->IncrementRecursionDepth());
         parse_loop_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_samples;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_bootstrapNSamples;
        break;
      }

      // optional int32 bootstrapNSamples = 3;
      case 3: {
        if (tag == 24) {
         parse_bootstrapNSamples:
          set_has_bootstrapnsamples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bootstrapnsamples_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_borderCells;
        break;
      }

      // repeated .OptCAD.proto.AdaptiveGridCell borderCells = 4;
      case 4: {
        if (tag == 34) {
         parse_borderCells:
          DO_(input->IncrementRecursionDepth());
         parse_loop_borderCells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bordercells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_borderCells;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(41)) goto parse_range;
        break;
      }

      // repeated double range = 5;
      case 5: {
        if (tag == 41) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_range())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_range())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_range;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.PrecomputedParametricShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.PrecomputedParametricShape)
  return false;
#undef DO_
}

void PrecomputedParametricShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.PrecomputedParametricShape)
  // optional .OptCAD.proto.AdaptiveGridCell root = 1;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->root_, output);
  }

  // repeated .OptCAD.proto.PrecomputedSample samples = 2;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->samples(i), output);
  }

  // optional int32 bootstrapNSamples = 3;
  if (has_bootstrapnsamples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bootstrapnsamples(), output);
  }

  // repeated .OptCAD.proto.AdaptiveGridCell borderCells = 4;
  for (unsigned int i = 0, n = this->bordercells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bordercells(i), output);
  }

  // repeated double range = 5;
  for (int i = 0; i < this->range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->range(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.PrecomputedParametricShape)
}

::google::protobuf::uint8* PrecomputedParametricShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.PrecomputedParametricShape)
  // optional .OptCAD.proto.AdaptiveGridCell root = 1;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->root_, false, target);
  }

  // repeated .OptCAD.proto.PrecomputedSample samples = 2;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->samples(i), false, target);
  }

  // optional int32 bootstrapNSamples = 3;
  if (has_bootstrapnsamples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bootstrapnsamples(), target);
  }

  // repeated .OptCAD.proto.AdaptiveGridCell borderCells = 4;
  for (unsigned int i = 0, n = this->bordercells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->bordercells(i), false, target);
  }

  // repeated double range = 5;
  for (int i = 0; i < this->range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->range(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.PrecomputedParametricShape)
  return target;
}

size_t PrecomputedParametricShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.PrecomputedParametricShape)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .OptCAD.proto.AdaptiveGridCell root = 1;
    if (has_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->root_);
    }

    // optional int32 bootstrapNSamples = 3;
    if (has_bootstrapnsamples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bootstrapnsamples());
    }

  }
  // repeated .OptCAD.proto.PrecomputedSample samples = 2;
  {
    unsigned int count = this->samples_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->samples(i));
    }
  }

  // repeated .OptCAD.proto.AdaptiveGridCell borderCells = 4;
  {
    unsigned int count = this->bordercells_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bordercells(i));
    }
  }

  // repeated double range = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->range_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->range_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecomputedParametricShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.PrecomputedParametricShape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrecomputedParametricShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrecomputedParametricShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.PrecomputedParametricShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.PrecomputedParametricShape)
    UnsafeMergeFrom(*source);
  }
}

void PrecomputedParametricShape::MergeFrom(const PrecomputedParametricShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.PrecomputedParametricShape)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrecomputedParametricShape::UnsafeMergeFrom(const PrecomputedParametricShape& from) {
  GOOGLE_DCHECK(&from != this);
  samples_.MergeFrom(from.samples_);
  bordercells_.MergeFrom(from.bordercells_);
  range_.UnsafeMergeFrom(from.range_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root()) {
      mutable_root()->::OptCAD::proto::AdaptiveGridCell::MergeFrom(from.root());
    }
    if (from.has_bootstrapnsamples()) {
      set_bootstrapnsamples(from.bootstrapnsamples());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PrecomputedParametricShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.PrecomputedParametricShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrecomputedParametricShape::CopyFrom(const PrecomputedParametricShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.PrecomputedParametricShape)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrecomputedParametricShape::IsInitialized() const {

  return true;
}

void PrecomputedParametricShape::Swap(PrecomputedParametricShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecomputedParametricShape::InternalSwap(PrecomputedParametricShape* other) {
  std::swap(root_, other->root_);
  samples_.UnsafeArenaSwap(&other->samples_);
  std::swap(bootstrapnsamples_, other->bootstrapnsamples_);
  bordercells_.UnsafeArenaSwap(&other->bordercells_);
  range_.UnsafeArenaSwap(&other->range_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrecomputedParametricShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrecomputedParametricShape_descriptor_;
  metadata.reflection = PrecomputedParametricShape_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecomputedParametricShape

// optional .OptCAD.proto.AdaptiveGridCell root = 1;
bool PrecomputedParametricShape::has_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrecomputedParametricShape::set_has_root() {
  _has_bits_[0] |= 0x00000001u;
}
void PrecomputedParametricShape::clear_has_root() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrecomputedParametricShape::clear_root() {
  if (root_ != NULL) root_->::OptCAD::proto::AdaptiveGridCell::Clear();
  clear_has_root();
}
const ::OptCAD::proto::AdaptiveGridCell& PrecomputedParametricShape::root() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedParametricShape.root)
  return root_ != NULL ? *root_
                         : *::OptCAD::proto::AdaptiveGridCell::internal_default_instance();
}
::OptCAD::proto::AdaptiveGridCell* PrecomputedParametricShape::mutable_root() {
  set_has_root();
  if (root_ == NULL) {
    root_ = new ::OptCAD::proto::AdaptiveGridCell;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.PrecomputedParametricShape.root)
  return root_;
}
::OptCAD::proto::AdaptiveGridCell* PrecomputedParametricShape::release_root() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.PrecomputedParametricShape.root)
  clear_has_root();
  ::OptCAD::proto::AdaptiveGridCell* temp = root_;
  root_ = NULL;
  return temp;
}
void PrecomputedParametricShape::set_allocated_root(::OptCAD::proto::AdaptiveGridCell* root) {
  delete root_;
  root_ = root;
  if (root) {
    set_has_root();
  } else {
    clear_has_root();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.PrecomputedParametricShape.root)
}

// repeated .OptCAD.proto.PrecomputedSample samples = 2;
int PrecomputedParametricShape::samples_size() const {
  return samples_.size();
}
void PrecomputedParametricShape::clear_samples() {
  samples_.Clear();
}
const ::OptCAD::proto::PrecomputedSample& PrecomputedParametricShape::samples(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedParametricShape.samples)
  return samples_.Get(index);
}
::OptCAD::proto::PrecomputedSample* PrecomputedParametricShape::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.PrecomputedParametricShape.samples)
  return samples_.Mutable(index);
}
::OptCAD::proto::PrecomputedSample* PrecomputedParametricShape::add_samples() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.PrecomputedParametricShape.samples)
  return samples_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::PrecomputedSample >*
PrecomputedParametricShape::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.PrecomputedParametricShape.samples)
  return &samples_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::PrecomputedSample >&
PrecomputedParametricShape::samples() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.PrecomputedParametricShape.samples)
  return samples_;
}

// optional int32 bootstrapNSamples = 3;
bool PrecomputedParametricShape::has_bootstrapnsamples() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PrecomputedParametricShape::set_has_bootstrapnsamples() {
  _has_bits_[0] |= 0x00000004u;
}
void PrecomputedParametricShape::clear_has_bootstrapnsamples() {
  _has_bits_[0] &= ~0x00000004u;
}
void PrecomputedParametricShape::clear_bootstrapnsamples() {
  bootstrapnsamples_ = 0;
  clear_has_bootstrapnsamples();
}
::google::protobuf::int32 PrecomputedParametricShape::bootstrapnsamples() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedParametricShape.bootstrapNSamples)
  return bootstrapnsamples_;
}
void PrecomputedParametricShape::set_bootstrapnsamples(::google::protobuf::int32 value) {
  set_has_bootstrapnsamples();
  bootstrapnsamples_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.PrecomputedParametricShape.bootstrapNSamples)
}

// repeated .OptCAD.proto.AdaptiveGridCell borderCells = 4;
int PrecomputedParametricShape::bordercells_size() const {
  return bordercells_.size();
}
void PrecomputedParametricShape::clear_bordercells() {
  bordercells_.Clear();
}
const ::OptCAD::proto::AdaptiveGridCell& PrecomputedParametricShape::bordercells(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedParametricShape.borderCells)
  return bordercells_.Get(index);
}
::OptCAD::proto::AdaptiveGridCell* PrecomputedParametricShape::mutable_bordercells(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.PrecomputedParametricShape.borderCells)
  return bordercells_.Mutable(index);
}
::OptCAD::proto::AdaptiveGridCell* PrecomputedParametricShape::add_bordercells() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.PrecomputedParametricShape.borderCells)
  return bordercells_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::AdaptiveGridCell >*
PrecomputedParametricShape::mutable_bordercells() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.PrecomputedParametricShape.borderCells)
  return &bordercells_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::AdaptiveGridCell >&
PrecomputedParametricShape::bordercells() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.PrecomputedParametricShape.borderCells)
  return bordercells_;
}

// repeated double range = 5;
int PrecomputedParametricShape::range_size() const {
  return range_.size();
}
void PrecomputedParametricShape::clear_range() {
  range_.Clear();
}
double PrecomputedParametricShape::range(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedParametricShape.range)
  return range_.Get(index);
}
void PrecomputedParametricShape::set_range(int index, double value) {
  range_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.PrecomputedParametricShape.range)
}
void PrecomputedParametricShape::add_range(double value) {
  range_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.PrecomputedParametricShape.range)
}
const ::google::protobuf::RepeatedField< double >&
PrecomputedParametricShape::range() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.PrecomputedParametricShape.range)
  return range_;
}
::google::protobuf::RepeatedField< double >*
PrecomputedParametricShape::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.PrecomputedParametricShape.range)
  return &range_;
}

inline const PrecomputedParametricShape* PrecomputedParametricShape::internal_default_instance() {
  return &PrecomputedParametricShape_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecomputedSample::kIdFieldNumber;
const int PrecomputedSample::kCenterFieldNumber;
const int PrecomputedSample::kShapeInfoFieldNumber;
const int PrecomputedSample::kBasisFuntionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecomputedSample::PrecomputedSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.PrecomputedSample)
}

void PrecomputedSample::InitAsDefaultInstance() {
  shapeinfo_ = const_cast< ::OptCAD::proto::ShapeInfo*>(
      ::OptCAD::proto::ShapeInfo::internal_default_instance());
}

PrecomputedSample::PrecomputedSample(const PrecomputedSample& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.PrecomputedSample)
}

void PrecomputedSample::SharedCtor() {
  _cached_size_ = 0;
  shapeinfo_ = NULL;
  id_ = 0;
}

PrecomputedSample::~PrecomputedSample() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.PrecomputedSample)
  SharedDtor();
}

void PrecomputedSample::SharedDtor() {
  if (this != &PrecomputedSample_default_instance_.get()) {
    delete shapeinfo_;
  }
}

void PrecomputedSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrecomputedSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrecomputedSample_descriptor_;
}

const PrecomputedSample& PrecomputedSample::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrecomputedSample> PrecomputedSample_default_instance_;

PrecomputedSample* PrecomputedSample::New(::google::protobuf::Arena* arena) const {
  PrecomputedSample* n = new PrecomputedSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecomputedSample::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.PrecomputedSample)
  if (_has_bits_[0 / 32] & 5u) {
    id_ = 0;
    if (has_shapeinfo()) {
      if (shapeinfo_ != NULL) shapeinfo_->::OptCAD::proto::ShapeInfo::Clear();
    }
  }
  center_.Clear();
  basisfuntions_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PrecomputedSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.PrecomputedSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_center;
        break;
      }

      // repeated double center = 2;
      case 2: {
        if (tag == 17) {
         parse_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_center())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_center())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_center;
        if (input->ExpectTag(26)) goto parse_shapeInfo;
        break;
      }

      // optional .OptCAD.proto.ShapeInfo shapeInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_shapeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_basisFuntions;
        break;
      }

      // repeated .OptCAD.proto.BasisFunction basisFuntions = 4;
      case 4: {
        if (tag == 34) {
         parse_basisFuntions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_basisFuntions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_basisfuntions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_basisFuntions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.PrecomputedSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.PrecomputedSample)
  return false;
#undef DO_
}

void PrecomputedSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.PrecomputedSample)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated double center = 2;
  for (int i = 0; i < this->center_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->center(i), output);
  }

  // optional .OptCAD.proto.ShapeInfo shapeInfo = 3;
  if (has_shapeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shapeinfo_, output);
  }

  // repeated .OptCAD.proto.BasisFunction basisFuntions = 4;
  for (unsigned int i = 0, n = this->basisfuntions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->basisfuntions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.PrecomputedSample)
}

::google::protobuf::uint8* PrecomputedSample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.PrecomputedSample)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated double center = 2;
  for (int i = 0; i < this->center_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->center(i), target);
  }

  // optional .OptCAD.proto.ShapeInfo shapeInfo = 3;
  if (has_shapeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shapeinfo_, false, target);
  }

  // repeated .OptCAD.proto.BasisFunction basisFuntions = 4;
  for (unsigned int i = 0, n = this->basisfuntions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->basisfuntions(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.PrecomputedSample)
  return target;
}

size_t PrecomputedSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.PrecomputedSample)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .OptCAD.proto.ShapeInfo shapeInfo = 3;
    if (has_shapeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shapeinfo_);
    }

  }
  // repeated double center = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->center_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->center_size());
    total_size += data_size;
  }

  // repeated .OptCAD.proto.BasisFunction basisFuntions = 4;
  {
    unsigned int count = this->basisfuntions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basisfuntions(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecomputedSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.PrecomputedSample)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrecomputedSample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrecomputedSample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.PrecomputedSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.PrecomputedSample)
    UnsafeMergeFrom(*source);
  }
}

void PrecomputedSample::MergeFrom(const PrecomputedSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.PrecomputedSample)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrecomputedSample::UnsafeMergeFrom(const PrecomputedSample& from) {
  GOOGLE_DCHECK(&from != this);
  center_.UnsafeMergeFrom(from.center_);
  basisfuntions_.MergeFrom(from.basisfuntions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_shapeinfo()) {
      mutable_shapeinfo()->::OptCAD::proto::ShapeInfo::MergeFrom(from.shapeinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PrecomputedSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.PrecomputedSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrecomputedSample::CopyFrom(const PrecomputedSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.PrecomputedSample)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrecomputedSample::IsInitialized() const {

  return true;
}

void PrecomputedSample::Swap(PrecomputedSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecomputedSample::InternalSwap(PrecomputedSample* other) {
  std::swap(id_, other->id_);
  center_.UnsafeArenaSwap(&other->center_);
  std::swap(shapeinfo_, other->shapeinfo_);
  basisfuntions_.UnsafeArenaSwap(&other->basisfuntions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrecomputedSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrecomputedSample_descriptor_;
  metadata.reflection = PrecomputedSample_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecomputedSample

// optional int32 id = 1;
bool PrecomputedSample::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrecomputedSample::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PrecomputedSample::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrecomputedSample::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 PrecomputedSample::id() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedSample.id)
  return id_;
}
void PrecomputedSample::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.PrecomputedSample.id)
}

// repeated double center = 2;
int PrecomputedSample::center_size() const {
  return center_.size();
}
void PrecomputedSample::clear_center() {
  center_.Clear();
}
double PrecomputedSample::center(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedSample.center)
  return center_.Get(index);
}
void PrecomputedSample::set_center(int index, double value) {
  center_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.PrecomputedSample.center)
}
void PrecomputedSample::add_center(double value) {
  center_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.PrecomputedSample.center)
}
const ::google::protobuf::RepeatedField< double >&
PrecomputedSample::center() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.PrecomputedSample.center)
  return center_;
}
::google::protobuf::RepeatedField< double >*
PrecomputedSample::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.PrecomputedSample.center)
  return &center_;
}

// optional .OptCAD.proto.ShapeInfo shapeInfo = 3;
bool PrecomputedSample::has_shapeinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PrecomputedSample::set_has_shapeinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void PrecomputedSample::clear_has_shapeinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void PrecomputedSample::clear_shapeinfo() {
  if (shapeinfo_ != NULL) shapeinfo_->::OptCAD::proto::ShapeInfo::Clear();
  clear_has_shapeinfo();
}
const ::OptCAD::proto::ShapeInfo& PrecomputedSample::shapeinfo() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedSample.shapeInfo)
  return shapeinfo_ != NULL ? *shapeinfo_
                         : *::OptCAD::proto::ShapeInfo::internal_default_instance();
}
::OptCAD::proto::ShapeInfo* PrecomputedSample::mutable_shapeinfo() {
  set_has_shapeinfo();
  if (shapeinfo_ == NULL) {
    shapeinfo_ = new ::OptCAD::proto::ShapeInfo;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.PrecomputedSample.shapeInfo)
  return shapeinfo_;
}
::OptCAD::proto::ShapeInfo* PrecomputedSample::release_shapeinfo() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.PrecomputedSample.shapeInfo)
  clear_has_shapeinfo();
  ::OptCAD::proto::ShapeInfo* temp = shapeinfo_;
  shapeinfo_ = NULL;
  return temp;
}
void PrecomputedSample::set_allocated_shapeinfo(::OptCAD::proto::ShapeInfo* shapeinfo) {
  delete shapeinfo_;
  shapeinfo_ = shapeinfo;
  if (shapeinfo) {
    set_has_shapeinfo();
  } else {
    clear_has_shapeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.PrecomputedSample.shapeInfo)
}

// repeated .OptCAD.proto.BasisFunction basisFuntions = 4;
int PrecomputedSample::basisfuntions_size() const {
  return basisfuntions_.size();
}
void PrecomputedSample::clear_basisfuntions() {
  basisfuntions_.Clear();
}
const ::OptCAD::proto::BasisFunction& PrecomputedSample::basisfuntions(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedSample.basisFuntions)
  return basisfuntions_.Get(index);
}
::OptCAD::proto::BasisFunction* PrecomputedSample::mutable_basisfuntions(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.PrecomputedSample.basisFuntions)
  return basisfuntions_.Mutable(index);
}
::OptCAD::proto::BasisFunction* PrecomputedSample::add_basisfuntions() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.PrecomputedSample.basisFuntions)
  return basisfuntions_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::BasisFunction >*
PrecomputedSample::mutable_basisfuntions() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.PrecomputedSample.basisFuntions)
  return &basisfuntions_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::BasisFunction >&
PrecomputedSample::basisfuntions() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.PrecomputedSample.basisFuntions)
  return basisfuntions_;
}

inline const PrecomputedSample* PrecomputedSample::internal_default_instance() {
  return &PrecomputedSample_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FunctionTestShapeInfo::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FunctionTestShapeInfo::FunctionTestShapeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.FunctionTestShapeInfo)
}

void FunctionTestShapeInfo::InitAsDefaultInstance() {
}

FunctionTestShapeInfo::FunctionTestShapeInfo(const FunctionTestShapeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.FunctionTestShapeInfo)
}

void FunctionTestShapeInfo::SharedCtor() {
  _cached_size_ = 0;
  val_ = 0;
}

FunctionTestShapeInfo::~FunctionTestShapeInfo() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.FunctionTestShapeInfo)
  SharedDtor();
}

void FunctionTestShapeInfo::SharedDtor() {
}

void FunctionTestShapeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionTestShapeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionTestShapeInfo_descriptor_;
}

const FunctionTestShapeInfo& FunctionTestShapeInfo::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FunctionTestShapeInfo> FunctionTestShapeInfo_default_instance_;

FunctionTestShapeInfo* FunctionTestShapeInfo::New(::google::protobuf::Arena* arena) const {
  FunctionTestShapeInfo* n = new FunctionTestShapeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FunctionTestShapeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.FunctionTestShapeInfo)
  val_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FunctionTestShapeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.FunctionTestShapeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double val = 1;
      case 1: {
        if (tag == 9) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.FunctionTestShapeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.FunctionTestShapeInfo)
  return false;
#undef DO_
}

void FunctionTestShapeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.FunctionTestShapeInfo)
  // optional double val = 1;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.FunctionTestShapeInfo)
}

::google::protobuf::uint8* FunctionTestShapeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.FunctionTestShapeInfo)
  // optional double val = 1;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.FunctionTestShapeInfo)
  return target;
}

size_t FunctionTestShapeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.FunctionTestShapeInfo)
  size_t total_size = 0;

  // optional double val = 1;
  if (has_val()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionTestShapeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.FunctionTestShapeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FunctionTestShapeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FunctionTestShapeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.FunctionTestShapeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.FunctionTestShapeInfo)
    UnsafeMergeFrom(*source);
  }
}

void FunctionTestShapeInfo::MergeFrom(const FunctionTestShapeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.FunctionTestShapeInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FunctionTestShapeInfo::UnsafeMergeFrom(const FunctionTestShapeInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FunctionTestShapeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.FunctionTestShapeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionTestShapeInfo::CopyFrom(const FunctionTestShapeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.FunctionTestShapeInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FunctionTestShapeInfo::IsInitialized() const {

  return true;
}

void FunctionTestShapeInfo::Swap(FunctionTestShapeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionTestShapeInfo::InternalSwap(FunctionTestShapeInfo* other) {
  std::swap(val_, other->val_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FunctionTestShapeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionTestShapeInfo_descriptor_;
  metadata.reflection = FunctionTestShapeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FunctionTestShapeInfo

// optional double val = 1;
bool FunctionTestShapeInfo::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FunctionTestShapeInfo::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
void FunctionTestShapeInfo::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
void FunctionTestShapeInfo::clear_val() {
  val_ = 0;
  clear_has_val();
}
double FunctionTestShapeInfo::val() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.FunctionTestShapeInfo.val)
  return val_;
}
void FunctionTestShapeInfo::set_val(double value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.FunctionTestShapeInfo.val)
}

inline const FunctionTestShapeInfo* FunctionTestShapeInfo::internal_default_instance() {
  return &FunctionTestShapeInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector4i::kXFieldNumber;
const int Vector4i::kYFieldNumber;
const int Vector4i::kZFieldNumber;
const int Vector4i::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector4i::Vector4i()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.Vector4i)
}

void Vector4i::InitAsDefaultInstance() {
}

Vector4i::Vector4i(const Vector4i& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.Vector4i)
}

void Vector4i::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
}

Vector4i::~Vector4i() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.Vector4i)
  SharedDtor();
}

void Vector4i::SharedDtor() {
}

void Vector4i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector4i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector4i_descriptor_;
}

const Vector4i& Vector4i::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector4i> Vector4i_default_instance_;

Vector4i* Vector4i::New(::google::protobuf::Arena* arena) const {
  Vector4i* n = new Vector4i;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector4i::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.Vector4i)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector4i, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector4i*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector4i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.Vector4i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_w;
        break;
      }

      // optional int32 w = 4;
      case 4: {
        if (tag == 32) {
         parse_w:
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.Vector4i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.Vector4i)
  return false;
#undef DO_
}

void Vector4i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.Vector4i)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // optional int32 w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.Vector4i)
}

::google::protobuf::uint8* Vector4i::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.Vector4i)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // optional int32 w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.Vector4i)
  return target;
}

size_t Vector4i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.Vector4i)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

    // optional int32 w = 4;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4i::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.Vector4i)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector4i* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector4i>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.Vector4i)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.Vector4i)
    UnsafeMergeFrom(*source);
  }
}

void Vector4i::MergeFrom(const Vector4i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.Vector4i)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector4i::UnsafeMergeFrom(const Vector4i& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Vector4i::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.Vector4i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4i::CopyFrom(const Vector4i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.Vector4i)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector4i::IsInitialized() const {

  return true;
}

void Vector4i::Swap(Vector4i* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector4i::InternalSwap(Vector4i* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector4i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector4i_descriptor_;
  metadata.reflection = Vector4i_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector4i

// optional int32 x = 1;
bool Vector4i::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector4i::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector4i::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector4i::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Vector4i::x() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Vector4i.x)
  return x_;
}
void Vector4i::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.Vector4i.x)
}

// optional int32 y = 2;
bool Vector4i::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector4i::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector4i::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector4i::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Vector4i::y() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Vector4i.y)
  return y_;
}
void Vector4i::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.Vector4i.y)
}

// optional int32 z = 3;
bool Vector4i::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector4i::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector4i::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector4i::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 Vector4i::z() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Vector4i.z)
  return z_;
}
void Vector4i::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.Vector4i.z)
}

// optional int32 w = 4;
bool Vector4i::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vector4i::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
void Vector4i::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vector4i::clear_w() {
  w_ = 0;
  clear_has_w();
}
::google::protobuf::int32 Vector4i::w() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Vector4i.w)
  return w_;
}
void Vector4i::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.Vector4i.w)
}

inline const Vector4i* Vector4i::internal_default_instance() {
  return &Vector4i_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3d::Vector3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.Vector3d)
}

void Vector3d::InitAsDefaultInstance() {
}

Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.Vector3d)
}

void Vector3d::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3d_descriptor_;
}

const Vector3d& Vector3d::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector3d> Vector3d_default_instance_;

Vector3d* Vector3d::New(::google::protobuf::Arena* arena) const {
  Vector3d* n = new Vector3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.Vector3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.Vector3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.Vector3d)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.Vector3d)
}

::google::protobuf::uint8* Vector3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.Vector3d)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.Vector3d)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.Vector3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector3d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.Vector3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.Vector3d)
    UnsafeMergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.Vector3d)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector3d::UnsafeMergeFrom(const Vector3d& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.Vector3d)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector3d::IsInitialized() const {

  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3d::InternalSwap(Vector3d* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3d_descriptor_;
  metadata.reflection = Vector3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3d

// optional double x = 1;
bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Vector3d.x)
  return x_;
}
void Vector3d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.Vector3d.x)
}

// optional double y = 2;
bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Vector3d.y)
  return y_;
}
void Vector3d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.Vector3d.y)
}

// optional double z = 3;
bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Vector3d.z)
  return z_;
}
void Vector3d::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.Vector3d.z)
}

inline const Vector3d* Vector3d::internal_default_instance() {
  return &Vector3d_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryConditionValue::kForceFieldNumber;
const int BoundaryConditionValue::kHeatValueFieldNumber;
const int BoundaryConditionValue::kBoundaryTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryConditionValue::BoundaryConditionValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.BoundaryConditionValue)
}

void BoundaryConditionValue::InitAsDefaultInstance() {
  force_ = const_cast< ::OptCAD::proto::Vector3d*>(
      ::OptCAD::proto::Vector3d::internal_default_instance());
}

BoundaryConditionValue::BoundaryConditionValue(const BoundaryConditionValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.BoundaryConditionValue)
}

void BoundaryConditionValue::SharedCtor() {
  _cached_size_ = 0;
  force_ = NULL;
  ::memset(&heatvalue_, 0, reinterpret_cast<char*>(&boundarytype_) -
    reinterpret_cast<char*>(&heatvalue_) + sizeof(boundarytype_));
}

BoundaryConditionValue::~BoundaryConditionValue() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.BoundaryConditionValue)
  SharedDtor();
}

void BoundaryConditionValue::SharedDtor() {
  if (this != &BoundaryConditionValue_default_instance_.get()) {
    delete force_;
  }
}

void BoundaryConditionValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryConditionValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundaryConditionValue_descriptor_;
}

const BoundaryConditionValue& BoundaryConditionValue::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BoundaryConditionValue> BoundaryConditionValue_default_instance_;

BoundaryConditionValue* BoundaryConditionValue::New(::google::protobuf::Arena* arena) const {
  BoundaryConditionValue* n = new BoundaryConditionValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryConditionValue::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.BoundaryConditionValue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BoundaryConditionValue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BoundaryConditionValue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(heatvalue_, boundarytype_);
    if (has_force()) {
      if (force_ != NULL) force_->::OptCAD::proto::Vector3d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoundaryConditionValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.BoundaryConditionValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OptCAD.proto.Vector3d force = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_heatValue;
        break;
      }

      // optional double heatValue = 2;
      case 2: {
        if (tag == 17) {
         parse_heatValue:
          set_has_heatvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heatvalue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_boundaryType;
        break;
      }

      // optional .OptCAD.proto.BoundaryType boundaryType = 3;
      case 3: {
        if (tag == 24) {
         parse_boundaryType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OptCAD::proto::BoundaryType_IsValid(value)) {
            set_boundarytype(static_cast< ::OptCAD::proto::BoundaryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.BoundaryConditionValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.BoundaryConditionValue)
  return false;
#undef DO_
}

void BoundaryConditionValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.BoundaryConditionValue)
  // optional .OptCAD.proto.Vector3d force = 1;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->force_, output);
  }

  // optional double heatValue = 2;
  if (has_heatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->heatvalue(), output);
  }

  // optional .OptCAD.proto.BoundaryType boundaryType = 3;
  if (has_boundarytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->boundarytype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.BoundaryConditionValue)
}

::google::protobuf::uint8* BoundaryConditionValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.BoundaryConditionValue)
  // optional .OptCAD.proto.Vector3d force = 1;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->force_, false, target);
  }

  // optional double heatValue = 2;
  if (has_heatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->heatvalue(), target);
  }

  // optional .OptCAD.proto.BoundaryType boundaryType = 3;
  if (has_boundarytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->boundarytype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.BoundaryConditionValue)
  return target;
}

size_t BoundaryConditionValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.BoundaryConditionValue)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .OptCAD.proto.Vector3d force = 1;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->force_);
    }

    // optional double heatValue = 2;
    if (has_heatvalue()) {
      total_size += 1 + 8;
    }

    // optional .OptCAD.proto.BoundaryType boundaryType = 3;
    if (has_boundarytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->boundarytype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryConditionValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.BoundaryConditionValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoundaryConditionValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryConditionValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.BoundaryConditionValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.BoundaryConditionValue)
    UnsafeMergeFrom(*source);
  }
}

void BoundaryConditionValue::MergeFrom(const BoundaryConditionValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.BoundaryConditionValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BoundaryConditionValue::UnsafeMergeFrom(const BoundaryConditionValue& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_force()) {
      mutable_force()->::OptCAD::proto::Vector3d::MergeFrom(from.force());
    }
    if (from.has_heatvalue()) {
      set_heatvalue(from.heatvalue());
    }
    if (from.has_boundarytype()) {
      set_boundarytype(from.boundarytype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BoundaryConditionValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.BoundaryConditionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryConditionValue::CopyFrom(const BoundaryConditionValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.BoundaryConditionValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BoundaryConditionValue::IsInitialized() const {

  return true;
}

void BoundaryConditionValue::Swap(BoundaryConditionValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryConditionValue::InternalSwap(BoundaryConditionValue* other) {
  std::swap(force_, other->force_);
  std::swap(heatvalue_, other->heatvalue_);
  std::swap(boundarytype_, other->boundarytype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryConditionValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundaryConditionValue_descriptor_;
  metadata.reflection = BoundaryConditionValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundaryConditionValue

// optional .OptCAD.proto.Vector3d force = 1;
bool BoundaryConditionValue::has_force() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoundaryConditionValue::set_has_force() {
  _has_bits_[0] |= 0x00000001u;
}
void BoundaryConditionValue::clear_has_force() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoundaryConditionValue::clear_force() {
  if (force_ != NULL) force_->::OptCAD::proto::Vector3d::Clear();
  clear_has_force();
}
const ::OptCAD::proto::Vector3d& BoundaryConditionValue::force() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryConditionValue.force)
  return force_ != NULL ? *force_
                         : *::OptCAD::proto::Vector3d::internal_default_instance();
}
::OptCAD::proto::Vector3d* BoundaryConditionValue::mutable_force() {
  set_has_force();
  if (force_ == NULL) {
    force_ = new ::OptCAD::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.BoundaryConditionValue.force)
  return force_;
}
::OptCAD::proto::Vector3d* BoundaryConditionValue::release_force() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.BoundaryConditionValue.force)
  clear_has_force();
  ::OptCAD::proto::Vector3d* temp = force_;
  force_ = NULL;
  return temp;
}
void BoundaryConditionValue::set_allocated_force(::OptCAD::proto::Vector3d* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.BoundaryConditionValue.force)
}

// optional double heatValue = 2;
bool BoundaryConditionValue::has_heatvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoundaryConditionValue::set_has_heatvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void BoundaryConditionValue::clear_has_heatvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoundaryConditionValue::clear_heatvalue() {
  heatvalue_ = 0;
  clear_has_heatvalue();
}
double BoundaryConditionValue::heatvalue() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryConditionValue.heatValue)
  return heatvalue_;
}
void BoundaryConditionValue::set_heatvalue(double value) {
  set_has_heatvalue();
  heatvalue_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.BoundaryConditionValue.heatValue)
}

// optional .OptCAD.proto.BoundaryType boundaryType = 3;
bool BoundaryConditionValue::has_boundarytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BoundaryConditionValue::set_has_boundarytype() {
  _has_bits_[0] |= 0x00000004u;
}
void BoundaryConditionValue::clear_has_boundarytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void BoundaryConditionValue::clear_boundarytype() {
  boundarytype_ = 0;
  clear_has_boundarytype();
}
::OptCAD::proto::BoundaryType BoundaryConditionValue::boundarytype() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryConditionValue.boundaryType)
  return static_cast< ::OptCAD::proto::BoundaryType >(boundarytype_);
}
void BoundaryConditionValue::set_boundarytype(::OptCAD::proto::BoundaryType value) {
  assert(::OptCAD::proto::BoundaryType_IsValid(value));
  set_has_boundarytype();
  boundarytype_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.BoundaryConditionValue.boundaryType)
}

inline const BoundaryConditionValue* BoundaryConditionValue::internal_default_instance() {
  return &BoundaryConditionValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryCondition::kIsFixedFieldNumber;
const int BoundaryCondition::kForceFieldNumber;
const int BoundaryCondition::kVerticesFieldNumber;
const int BoundaryCondition::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryCondition::BoundaryCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.BoundaryCondition)
}

void BoundaryCondition::InitAsDefaultInstance() {
  force_ = const_cast< ::OptCAD::proto::Vector3d*>(
      ::OptCAD::proto::Vector3d::internal_default_instance());
  value_ = const_cast< ::OptCAD::proto::BoundaryConditionValue*>(
      ::OptCAD::proto::BoundaryConditionValue::internal_default_instance());
}

BoundaryCondition::BoundaryCondition(const BoundaryCondition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.BoundaryCondition)
}

void BoundaryCondition::SharedCtor() {
  _cached_size_ = 0;
  force_ = NULL;
  value_ = NULL;
  isfixed_ = false;
}

BoundaryCondition::~BoundaryCondition() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.BoundaryCondition)
  SharedDtor();
}

void BoundaryCondition::SharedDtor() {
  if (this != &BoundaryCondition_default_instance_.get()) {
    delete force_;
    delete value_;
  }
}

void BoundaryCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundaryCondition_descriptor_;
}

const BoundaryCondition& BoundaryCondition::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BoundaryCondition> BoundaryCondition_default_instance_;

BoundaryCondition* BoundaryCondition::New(::google::protobuf::Arena* arena) const {
  BoundaryCondition* n = new BoundaryCondition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.BoundaryCondition)
  if (_has_bits_[0 / 32] & 11u) {
    isfixed_ = false;
    if (has_force()) {
      if (force_ != NULL) force_->::OptCAD::proto::Vector3d::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::OptCAD::proto::BoundaryConditionValue::Clear();
    }
  }
  vertices_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoundaryCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.BoundaryCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isFixed = 1;
      case 1: {
        if (tag == 8) {
          set_has_isfixed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfixed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_force;
        break;
      }

      // optional .OptCAD.proto.Vector3d force = 2;
      case 2: {
        if (tag == 18) {
         parse_force:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vertices;
        break;
      }

      // repeated int32 vertices = 3;
      case 3: {
        if (tag == 24) {
         parse_vertices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_vertices())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vertices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vertices;
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional .OptCAD.proto.BoundaryConditionValue value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.BoundaryCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.BoundaryCondition)
  return false;
#undef DO_
}

void BoundaryCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.BoundaryCondition)
  // optional bool isFixed = 1;
  if (has_isfixed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfixed(), output);
  }

  // optional .OptCAD.proto.Vector3d force = 2;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->force_, output);
  }

  // repeated int32 vertices = 3;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->vertices(i), output);
  }

  // optional .OptCAD.proto.BoundaryConditionValue value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.BoundaryCondition)
}

::google::protobuf::uint8* BoundaryCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.BoundaryCondition)
  // optional bool isFixed = 1;
  if (has_isfixed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfixed(), target);
  }

  // optional .OptCAD.proto.Vector3d force = 2;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->force_, false, target);
  }

  // repeated int32 vertices = 3;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->vertices(i), target);
  }

  // optional .OptCAD.proto.BoundaryConditionValue value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.BoundaryCondition)
  return target;
}

size_t BoundaryCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.BoundaryCondition)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional bool isFixed = 1;
    if (has_isfixed()) {
      total_size += 1 + 1;
    }

    // optional .OptCAD.proto.Vector3d force = 2;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->force_);
    }

    // optional .OptCAD.proto.BoundaryConditionValue value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  // repeated int32 vertices = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->vertices_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vertices(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->vertices_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.BoundaryCondition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoundaryCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.BoundaryCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.BoundaryCondition)
    UnsafeMergeFrom(*source);
  }
}

void BoundaryCondition::MergeFrom(const BoundaryCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.BoundaryCondition)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BoundaryCondition::UnsafeMergeFrom(const BoundaryCondition& from) {
  GOOGLE_DCHECK(&from != this);
  vertices_.UnsafeMergeFrom(from.vertices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfixed()) {
      set_isfixed(from.isfixed());
    }
    if (from.has_force()) {
      mutable_force()->::OptCAD::proto::Vector3d::MergeFrom(from.force());
    }
    if (from.has_value()) {
      mutable_value()->::OptCAD::proto::BoundaryConditionValue::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BoundaryCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.BoundaryCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryCondition::CopyFrom(const BoundaryCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.BoundaryCondition)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BoundaryCondition::IsInitialized() const {

  return true;
}

void BoundaryCondition::Swap(BoundaryCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryCondition::InternalSwap(BoundaryCondition* other) {
  std::swap(isfixed_, other->isfixed_);
  std::swap(force_, other->force_);
  vertices_.UnsafeArenaSwap(&other->vertices_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundaryCondition_descriptor_;
  metadata.reflection = BoundaryCondition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundaryCondition

// optional bool isFixed = 1;
bool BoundaryCondition::has_isfixed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoundaryCondition::set_has_isfixed() {
  _has_bits_[0] |= 0x00000001u;
}
void BoundaryCondition::clear_has_isfixed() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoundaryCondition::clear_isfixed() {
  isfixed_ = false;
  clear_has_isfixed();
}
bool BoundaryCondition::isfixed() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryCondition.isFixed)
  return isfixed_;
}
void BoundaryCondition::set_isfixed(bool value) {
  set_has_isfixed();
  isfixed_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.BoundaryCondition.isFixed)
}

// optional .OptCAD.proto.Vector3d force = 2;
bool BoundaryCondition::has_force() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoundaryCondition::set_has_force() {
  _has_bits_[0] |= 0x00000002u;
}
void BoundaryCondition::clear_has_force() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoundaryCondition::clear_force() {
  if (force_ != NULL) force_->::OptCAD::proto::Vector3d::Clear();
  clear_has_force();
}
const ::OptCAD::proto::Vector3d& BoundaryCondition::force() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryCondition.force)
  return force_ != NULL ? *force_
                         : *::OptCAD::proto::Vector3d::internal_default_instance();
}
::OptCAD::proto::Vector3d* BoundaryCondition::mutable_force() {
  set_has_force();
  if (force_ == NULL) {
    force_ = new ::OptCAD::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.BoundaryCondition.force)
  return force_;
}
::OptCAD::proto::Vector3d* BoundaryCondition::release_force() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.BoundaryCondition.force)
  clear_has_force();
  ::OptCAD::proto::Vector3d* temp = force_;
  force_ = NULL;
  return temp;
}
void BoundaryCondition::set_allocated_force(::OptCAD::proto::Vector3d* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.BoundaryCondition.force)
}

// repeated int32 vertices = 3;
int BoundaryCondition::vertices_size() const {
  return vertices_.size();
}
void BoundaryCondition::clear_vertices() {
  vertices_.Clear();
}
::google::protobuf::int32 BoundaryCondition::vertices(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryCondition.vertices)
  return vertices_.Get(index);
}
void BoundaryCondition::set_vertices(int index, ::google::protobuf::int32 value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.BoundaryCondition.vertices)
}
void BoundaryCondition::add_vertices(::google::protobuf::int32 value) {
  vertices_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.BoundaryCondition.vertices)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BoundaryCondition::vertices() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.BoundaryCondition.vertices)
  return vertices_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BoundaryCondition::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.BoundaryCondition.vertices)
  return &vertices_;
}

// optional .OptCAD.proto.BoundaryConditionValue value = 4;
bool BoundaryCondition::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BoundaryCondition::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
void BoundaryCondition::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void BoundaryCondition::clear_value() {
  if (value_ != NULL) value_->::OptCAD::proto::BoundaryConditionValue::Clear();
  clear_has_value();
}
const ::OptCAD::proto::BoundaryConditionValue& BoundaryCondition::value() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryCondition.value)
  return value_ != NULL ? *value_
                         : *::OptCAD::proto::BoundaryConditionValue::internal_default_instance();
}
::OptCAD::proto::BoundaryConditionValue* BoundaryCondition::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::OptCAD::proto::BoundaryConditionValue;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.BoundaryCondition.value)
  return value_;
}
::OptCAD::proto::BoundaryConditionValue* BoundaryCondition::release_value() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.BoundaryCondition.value)
  clear_has_value();
  ::OptCAD::proto::BoundaryConditionValue* temp = value_;
  value_ = NULL;
  return temp;
}
void BoundaryCondition::set_allocated_value(::OptCAD::proto::BoundaryConditionValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.BoundaryCondition.value)
}

inline const BoundaryCondition* BoundaryCondition::internal_default_instance() {
  return &BoundaryCondition_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrecomputedPhysics::kNameFieldNumber;
const int PrecomputedPhysics::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrecomputedPhysics::PrecomputedPhysics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.PrecomputedPhysics)
}

void PrecomputedPhysics::InitAsDefaultInstance() {
}

PrecomputedPhysics::PrecomputedPhysics(const PrecomputedPhysics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.PrecomputedPhysics)
}

void PrecomputedPhysics::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrecomputedPhysics::~PrecomputedPhysics() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.PrecomputedPhysics)
  SharedDtor();
}

void PrecomputedPhysics::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrecomputedPhysics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrecomputedPhysics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrecomputedPhysics_descriptor_;
}

const PrecomputedPhysics& PrecomputedPhysics::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrecomputedPhysics> PrecomputedPhysics_default_instance_;

PrecomputedPhysics* PrecomputedPhysics::New(::google::protobuf::Arena* arena) const {
  PrecomputedPhysics* n = new PrecomputedPhysics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrecomputedPhysics::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.PrecomputedPhysics)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  values_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PrecomputedPhysics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.PrecomputedPhysics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OptCAD.proto.PrecomputedPhysics.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_values;
        break;
      }

      // repeated double values = 2;
      case 2: {
        if (tag == 17) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_values())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.PrecomputedPhysics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.PrecomputedPhysics)
  return false;
#undef DO_
}

void PrecomputedPhysics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.PrecomputedPhysics)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.PrecomputedPhysics.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated double values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.PrecomputedPhysics)
}

::google::protobuf::uint8* PrecomputedPhysics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.PrecomputedPhysics)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.PrecomputedPhysics.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.PrecomputedPhysics)
  return target;
}

size_t PrecomputedPhysics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.PrecomputedPhysics)
  size_t total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated double values = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->values_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->values_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrecomputedPhysics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.PrecomputedPhysics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrecomputedPhysics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrecomputedPhysics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.PrecomputedPhysics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.PrecomputedPhysics)
    UnsafeMergeFrom(*source);
  }
}

void PrecomputedPhysics::MergeFrom(const PrecomputedPhysics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.PrecomputedPhysics)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrecomputedPhysics::UnsafeMergeFrom(const PrecomputedPhysics& from) {
  GOOGLE_DCHECK(&from != this);
  values_.UnsafeMergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PrecomputedPhysics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.PrecomputedPhysics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrecomputedPhysics::CopyFrom(const PrecomputedPhysics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.PrecomputedPhysics)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrecomputedPhysics::IsInitialized() const {

  return true;
}

void PrecomputedPhysics::Swap(PrecomputedPhysics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrecomputedPhysics::InternalSwap(PrecomputedPhysics* other) {
  name_.Swap(&other->name_);
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrecomputedPhysics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrecomputedPhysics_descriptor_;
  metadata.reflection = PrecomputedPhysics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrecomputedPhysics

// optional string name = 1;
bool PrecomputedPhysics::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PrecomputedPhysics::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PrecomputedPhysics::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PrecomputedPhysics::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PrecomputedPhysics::name() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedPhysics.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrecomputedPhysics::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.PrecomputedPhysics.name)
}
void PrecomputedPhysics::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OptCAD.proto.PrecomputedPhysics.name)
}
void PrecomputedPhysics::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OptCAD.proto.PrecomputedPhysics.name)
}
::std::string* PrecomputedPhysics::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.PrecomputedPhysics.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrecomputedPhysics::release_name() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.PrecomputedPhysics.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrecomputedPhysics::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.PrecomputedPhysics.name)
}

// repeated double values = 2;
int PrecomputedPhysics::values_size() const {
  return values_.size();
}
void PrecomputedPhysics::clear_values() {
  values_.Clear();
}
double PrecomputedPhysics::values(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.PrecomputedPhysics.values)
  return values_.Get(index);
}
void PrecomputedPhysics::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.PrecomputedPhysics.values)
}
void PrecomputedPhysics::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.PrecomputedPhysics.values)
}
const ::google::protobuf::RepeatedField< double >&
PrecomputedPhysics::values() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.PrecomputedPhysics.values)
  return values_;
}
::google::protobuf::RepeatedField< double >*
PrecomputedPhysics::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.PrecomputedPhysics.values)
  return &values_;
}

inline const PrecomputedPhysics* PrecomputedPhysics::internal_default_instance() {
  return &PrecomputedPhysics_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferencePoint::kIdFieldNumber;
const int ReferencePoint::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferencePoint::ReferencePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.ReferencePoint)
}

void ReferencePoint::InitAsDefaultInstance() {
  pos_ = const_cast< ::OptCAD::proto::Vector3d*>(
      ::OptCAD::proto::Vector3d::internal_default_instance());
}

ReferencePoint::ReferencePoint(const ReferencePoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.ReferencePoint)
}

void ReferencePoint::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = NULL;
}

ReferencePoint::~ReferencePoint() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.ReferencePoint)
  SharedDtor();
}

void ReferencePoint::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ReferencePoint_default_instance_.get()) {
    delete pos_;
  }
}

void ReferencePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferencePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferencePoint_descriptor_;
}

const ReferencePoint& ReferencePoint::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReferencePoint> ReferencePoint_default_instance_;

ReferencePoint* ReferencePoint::New(::google::protobuf::Arena* arena) const {
  ReferencePoint* n = new ReferencePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferencePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.ReferencePoint)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::OptCAD::proto::Vector3d::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReferencePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.ReferencePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OptCAD.proto.ReferencePoint.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .OptCAD.proto.Vector3d pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.ReferencePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.ReferencePoint)
  return false;
#undef DO_
}

void ReferencePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.ReferencePoint)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.ReferencePoint.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .OptCAD.proto.Vector3d pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.ReferencePoint)
}

::google::protobuf::uint8* ReferencePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.ReferencePoint)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.ReferencePoint.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .OptCAD.proto.Vector3d pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.ReferencePoint)
  return target;
}

size_t ReferencePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.ReferencePoint)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .OptCAD.proto.Vector3d pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferencePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.ReferencePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReferencePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferencePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.ReferencePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.ReferencePoint)
    UnsafeMergeFrom(*source);
  }
}

void ReferencePoint::MergeFrom(const ReferencePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.ReferencePoint)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReferencePoint::UnsafeMergeFrom(const ReferencePoint& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_pos()) {
      mutable_pos()->::OptCAD::proto::Vector3d::MergeFrom(from.pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ReferencePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.ReferencePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferencePoint::CopyFrom(const ReferencePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.ReferencePoint)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReferencePoint::IsInitialized() const {

  return true;
}

void ReferencePoint::Swap(ReferencePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferencePoint::InternalSwap(ReferencePoint* other) {
  id_.Swap(&other->id_);
  std::swap(pos_, other->pos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferencePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferencePoint_descriptor_;
  metadata.reflection = ReferencePoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferencePoint

// optional string id = 1;
bool ReferencePoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReferencePoint::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReferencePoint::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReferencePoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ReferencePoint::id() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.ReferencePoint.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferencePoint::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.ReferencePoint.id)
}
void ReferencePoint::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OptCAD.proto.ReferencePoint.id)
}
void ReferencePoint::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OptCAD.proto.ReferencePoint.id)
}
::std::string* ReferencePoint::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.ReferencePoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReferencePoint::release_id() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.ReferencePoint.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferencePoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.ReferencePoint.id)
}

// optional .OptCAD.proto.Vector3d pos = 2;
bool ReferencePoint::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReferencePoint::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void ReferencePoint::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReferencePoint::clear_pos() {
  if (pos_ != NULL) pos_->::OptCAD::proto::Vector3d::Clear();
  clear_has_pos();
}
const ::OptCAD::proto::Vector3d& ReferencePoint::pos() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.ReferencePoint.pos)
  return pos_ != NULL ? *pos_
                         : *::OptCAD::proto::Vector3d::internal_default_instance();
}
::OptCAD::proto::Vector3d* ReferencePoint::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::OptCAD::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.ReferencePoint.pos)
  return pos_;
}
::OptCAD::proto::Vector3d* ReferencePoint::release_pos() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.ReferencePoint.pos)
  clear_has_pos();
  ::OptCAD::proto::Vector3d* temp = pos_;
  pos_ = NULL;
  return temp;
}
void ReferencePoint::set_allocated_pos(::OptCAD::proto::Vector3d* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.ReferencePoint.pos)
}

inline const ReferencePoint* ReferencePoint::internal_default_instance() {
  return &ReferencePoint_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kFirstFieldNumber;
const int Link::kSecondFieldNumber;
const int Link::kMidPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.Link)
}

void Link::InitAsDefaultInstance() {
}

Link::Link(const Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.Link)
}

void Link::SharedCtor() {
  _cached_size_ = 0;
  first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  first_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Link> Link_default_instance_;

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.Link)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_first()) {
      first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_second()) {
      second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  midpoints_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first().data(), this->first().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OptCAD.proto.Link.first");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_second;
        break;
      }

      // optional string second = 2;
      case 2: {
        if (tag == 18) {
         parse_second:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->second().data(), this->second().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OptCAD.proto.Link.second");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_midPoints;
        break;
      }

      // repeated .OptCAD.proto.Vector3d midPoints = 3;
      case 3: {
        if (tag == 26) {
         parse_midPoints:
          DO_(input->IncrementRecursionDepth());
         parse_loop_midPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_midpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_midPoints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.Link)
  // optional string first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first().data(), this->first().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.Link.first");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->first(), output);
  }

  // optional string second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second().data(), this->second().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.Link.second");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->second(), output);
  }

  // repeated .OptCAD.proto.Vector3d midPoints = 3;
  for (unsigned int i = 0, n = this->midpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->midpoints(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.Link)
}

::google::protobuf::uint8* Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.Link)
  // optional string first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first().data(), this->first().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.Link.first");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->first(), target);
  }

  // optional string second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second().data(), this->second().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.Link.second");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->second(), target);
  }

  // repeated .OptCAD.proto.Vector3d midPoints = 3;
  for (unsigned int i = 0, n = this->midpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->midpoints(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.Link)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first());
    }

    // optional string second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->second());
    }

  }
  // repeated .OptCAD.proto.Vector3d midPoints = 3;
  {
    unsigned int count = this->midpoints_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->midpoints(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.Link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.Link)
    UnsafeMergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.Link)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Link::UnsafeMergeFrom(const Link& from) {
  GOOGLE_DCHECK(&from != this);
  midpoints_.MergeFrom(from.midpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_has_first();
      first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_);
    }
    if (from.has_second()) {
      set_has_second();
      second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.Link)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Link::IsInitialized() const {

  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  first_.Swap(&other->first_);
  second_.Swap(&other->second_);
  midpoints_.UnsafeArenaSwap(&other->midpoints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link

// optional string first = 1;
bool Link::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Link::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
void Link::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
void Link::clear_first() {
  first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first();
}
const ::std::string& Link::first() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Link.first)
  return first_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Link::set_first(const ::std::string& value) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.Link.first)
}
void Link::set_first(const char* value) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OptCAD.proto.Link.first)
}
void Link::set_first(const char* value, size_t size) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OptCAD.proto.Link.first)
}
::std::string* Link::mutable_first() {
  set_has_first();
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.Link.first)
  return first_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Link::release_first() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.Link.first)
  clear_has_first();
  return first_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Link::set_allocated_first(::std::string* first) {
  if (first != NULL) {
    set_has_first();
  } else {
    clear_has_first();
  }
  first_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first);
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.Link.first)
}

// optional string second = 2;
bool Link::has_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Link::set_has_second() {
  _has_bits_[0] |= 0x00000002u;
}
void Link::clear_has_second() {
  _has_bits_[0] &= ~0x00000002u;
}
void Link::clear_second() {
  second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_second();
}
const ::std::string& Link::second() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Link.second)
  return second_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Link::set_second(const ::std::string& value) {
  set_has_second();
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.Link.second)
}
void Link::set_second(const char* value) {
  set_has_second();
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OptCAD.proto.Link.second)
}
void Link::set_second(const char* value, size_t size) {
  set_has_second();
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OptCAD.proto.Link.second)
}
::std::string* Link::mutable_second() {
  set_has_second();
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.Link.second)
  return second_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Link::release_second() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.Link.second)
  clear_has_second();
  return second_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Link::set_allocated_second(::std::string* second) {
  if (second != NULL) {
    set_has_second();
  } else {
    clear_has_second();
  }
  second_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second);
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.Link.second)
}

// repeated .OptCAD.proto.Vector3d midPoints = 3;
int Link::midpoints_size() const {
  return midpoints_.size();
}
void Link::clear_midpoints() {
  midpoints_.Clear();
}
const ::OptCAD::proto::Vector3d& Link::midpoints(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.Link.midPoints)
  return midpoints_.Get(index);
}
::OptCAD::proto::Vector3d* Link::mutable_midpoints(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.Link.midPoints)
  return midpoints_.Mutable(index);
}
::OptCAD::proto::Vector3d* Link::add_midpoints() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.Link.midPoints)
  return midpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::Vector3d >*
Link::mutable_midpoints() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.Link.midPoints)
  return &midpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::Vector3d >&
Link::midpoints() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.Link.midPoints)
  return midpoints_;
}

inline const Link* Link::internal_default_instance() {
  return &Link_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlLoop::kLoopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlLoop::ControlLoop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.ControlLoop)
}

void ControlLoop::InitAsDefaultInstance() {
}

ControlLoop::ControlLoop(const ControlLoop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.ControlLoop)
}

void ControlLoop::SharedCtor() {
  _cached_size_ = 0;
}

ControlLoop::~ControlLoop() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.ControlLoop)
  SharedDtor();
}

void ControlLoop::SharedDtor() {
}

void ControlLoop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlLoop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlLoop_descriptor_;
}

const ControlLoop& ControlLoop::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ControlLoop> ControlLoop_default_instance_;

ControlLoop* ControlLoop::New(::google::protobuf::Arena* arena) const {
  ControlLoop* n = new ControlLoop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlLoop::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.ControlLoop)
  loop_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ControlLoop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.ControlLoop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string loop = 1;
      case 1: {
        if (tag == 10) {
         parse_loop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_loop()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loop(this->loop_size() - 1).data(),
            this->loop(this->loop_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OptCAD.proto.ControlLoop.loop");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.ControlLoop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.ControlLoop)
  return false;
#undef DO_
}

void ControlLoop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.ControlLoop)
  // repeated string loop = 1;
  for (int i = 0; i < this->loop_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loop(i).data(), this->loop(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.ControlLoop.loop");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->loop(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.ControlLoop)
}

::google::protobuf::uint8* ControlLoop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.ControlLoop)
  // repeated string loop = 1;
  for (int i = 0; i < this->loop_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loop(i).data(), this->loop(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.ControlLoop.loop");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->loop(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.ControlLoop)
  return target;
}

size_t ControlLoop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.ControlLoop)
  size_t total_size = 0;

  // repeated string loop = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->loop_size());
  for (int i = 0; i < this->loop_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->loop(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlLoop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.ControlLoop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControlLoop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlLoop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.ControlLoop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.ControlLoop)
    UnsafeMergeFrom(*source);
  }
}

void ControlLoop::MergeFrom(const ControlLoop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.ControlLoop)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ControlLoop::UnsafeMergeFrom(const ControlLoop& from) {
  GOOGLE_DCHECK(&from != this);
  loop_.UnsafeMergeFrom(from.loop_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ControlLoop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.ControlLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlLoop::CopyFrom(const ControlLoop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.ControlLoop)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ControlLoop::IsInitialized() const {

  return true;
}

void ControlLoop::Swap(ControlLoop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlLoop::InternalSwap(ControlLoop* other) {
  loop_.UnsafeArenaSwap(&other->loop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlLoop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlLoop_descriptor_;
  metadata.reflection = ControlLoop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlLoop

// repeated string loop = 1;
int ControlLoop::loop_size() const {
  return loop_.size();
}
void ControlLoop::clear_loop() {
  loop_.Clear();
}
const ::std::string& ControlLoop::loop(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.ControlLoop.loop)
  return loop_.Get(index);
}
::std::string* ControlLoop::mutable_loop(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.ControlLoop.loop)
  return loop_.Mutable(index);
}
void ControlLoop::set_loop(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OptCAD.proto.ControlLoop.loop)
  loop_.Mutable(index)->assign(value);
}
void ControlLoop::set_loop(int index, const char* value) {
  loop_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OptCAD.proto.ControlLoop.loop)
}
void ControlLoop::set_loop(int index, const char* value, size_t size) {
  loop_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OptCAD.proto.ControlLoop.loop)
}
::std::string* ControlLoop::add_loop() {
  // @@protoc_insertion_point(field_add_mutable:OptCAD.proto.ControlLoop.loop)
  return loop_.Add();
}
void ControlLoop::add_loop(const ::std::string& value) {
  loop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.ControlLoop.loop)
}
void ControlLoop::add_loop(const char* value) {
  loop_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OptCAD.proto.ControlLoop.loop)
}
void ControlLoop::add_loop(const char* value, size_t size) {
  loop_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OptCAD.proto.ControlLoop.loop)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ControlLoop::loop() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.ControlLoop.loop)
  return loop_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ControlLoop::mutable_loop() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.ControlLoop.loop)
  return &loop_;
}

inline const ControlLoop* ControlLoop::internal_default_instance() {
  return &ControlLoop_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryControl::kControlLoopsFieldNumber;
const int BoundaryControl::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryControl::BoundaryControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.BoundaryControl)
}

void BoundaryControl::InitAsDefaultInstance() {
  value_ = const_cast< ::OptCAD::proto::BoundaryConditionValue*>(
      ::OptCAD::proto::BoundaryConditionValue::internal_default_instance());
}

BoundaryControl::BoundaryControl(const BoundaryControl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.BoundaryControl)
}

void BoundaryControl::SharedCtor() {
  _cached_size_ = 0;
  value_ = NULL;
}

BoundaryControl::~BoundaryControl() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.BoundaryControl)
  SharedDtor();
}

void BoundaryControl::SharedDtor() {
  if (this != &BoundaryControl_default_instance_.get()) {
    delete value_;
  }
}

void BoundaryControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundaryControl_descriptor_;
}

const BoundaryControl& BoundaryControl::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BoundaryControl> BoundaryControl_default_instance_;

BoundaryControl* BoundaryControl::New(::google::protobuf::Arena* arena) const {
  BoundaryControl* n = new BoundaryControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryControl::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.BoundaryControl)
  if (has_value()) {
    if (value_ != NULL) value_->::OptCAD::proto::BoundaryConditionValue::Clear();
  }
  controlloops_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoundaryControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.BoundaryControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OptCAD.proto.ControlLoop controlLoops = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_controlLoops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_controlloops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_controlLoops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .OptCAD.proto.BoundaryConditionValue value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.BoundaryControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.BoundaryControl)
  return false;
#undef DO_
}

void BoundaryControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.BoundaryControl)
  // repeated .OptCAD.proto.ControlLoop controlLoops = 1;
  for (unsigned int i = 0, n = this->controlloops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->controlloops(i), output);
  }

  // optional .OptCAD.proto.BoundaryConditionValue value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.BoundaryControl)
}

::google::protobuf::uint8* BoundaryControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.BoundaryControl)
  // repeated .OptCAD.proto.ControlLoop controlLoops = 1;
  for (unsigned int i = 0, n = this->controlloops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->controlloops(i), false, target);
  }

  // optional .OptCAD.proto.BoundaryConditionValue value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.BoundaryControl)
  return target;
}

size_t BoundaryControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.BoundaryControl)
  size_t total_size = 0;

  // optional .OptCAD.proto.BoundaryConditionValue value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // repeated .OptCAD.proto.ControlLoop controlLoops = 1;
  {
    unsigned int count = this->controlloops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controlloops(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.BoundaryControl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoundaryControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.BoundaryControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.BoundaryControl)
    UnsafeMergeFrom(*source);
  }
}

void BoundaryControl::MergeFrom(const BoundaryControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.BoundaryControl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BoundaryControl::UnsafeMergeFrom(const BoundaryControl& from) {
  GOOGLE_DCHECK(&from != this);
  controlloops_.MergeFrom(from.controlloops_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_value()) {
      mutable_value()->::OptCAD::proto::BoundaryConditionValue::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BoundaryControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.BoundaryControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryControl::CopyFrom(const BoundaryControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.BoundaryControl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BoundaryControl::IsInitialized() const {

  return true;
}

void BoundaryControl::Swap(BoundaryControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryControl::InternalSwap(BoundaryControl* other) {
  controlloops_.UnsafeArenaSwap(&other->controlloops_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundaryControl_descriptor_;
  metadata.reflection = BoundaryControl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundaryControl

// repeated .OptCAD.proto.ControlLoop controlLoops = 1;
int BoundaryControl::controlloops_size() const {
  return controlloops_.size();
}
void BoundaryControl::clear_controlloops() {
  controlloops_.Clear();
}
const ::OptCAD::proto::ControlLoop& BoundaryControl::controlloops(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryControl.controlLoops)
  return controlloops_.Get(index);
}
::OptCAD::proto::ControlLoop* BoundaryControl::mutable_controlloops(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.BoundaryControl.controlLoops)
  return controlloops_.Mutable(index);
}
::OptCAD::proto::ControlLoop* BoundaryControl::add_controlloops() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.BoundaryControl.controlLoops)
  return controlloops_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::ControlLoop >*
BoundaryControl::mutable_controlloops() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.BoundaryControl.controlLoops)
  return &controlloops_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::ControlLoop >&
BoundaryControl::controlloops() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.BoundaryControl.controlLoops)
  return controlloops_;
}

// optional .OptCAD.proto.BoundaryConditionValue value = 2;
bool BoundaryControl::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoundaryControl::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void BoundaryControl::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoundaryControl::clear_value() {
  if (value_ != NULL) value_->::OptCAD::proto::BoundaryConditionValue::Clear();
  clear_has_value();
}
const ::OptCAD::proto::BoundaryConditionValue& BoundaryControl::value() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BoundaryControl.value)
  return value_ != NULL ? *value_
                         : *::OptCAD::proto::BoundaryConditionValue::internal_default_instance();
}
::OptCAD::proto::BoundaryConditionValue* BoundaryControl::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::OptCAD::proto::BoundaryConditionValue;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.BoundaryControl.value)
  return value_;
}
::OptCAD::proto::BoundaryConditionValue* BoundaryControl::release_value() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.BoundaryControl.value)
  clear_has_value();
  ::OptCAD::proto::BoundaryConditionValue* temp = value_;
  value_ = NULL;
  return temp;
}
void BoundaryControl::set_allocated_value(::OptCAD::proto::BoundaryConditionValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.BoundaryControl.value)
}

inline const BoundaryControl* BoundaryControl::internal_default_instance() {
  return &BoundaryControl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlPoints::kPointFieldNumber;
const int ControlPoints::kLinksFieldNumber;
const int ControlPoints::kBoundaryControlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlPoints::ControlPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.ControlPoints)
}

void ControlPoints::InitAsDefaultInstance() {
}

ControlPoints::ControlPoints(const ControlPoints& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.ControlPoints)
}

void ControlPoints::SharedCtor() {
  _cached_size_ = 0;
}

ControlPoints::~ControlPoints() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.ControlPoints)
  SharedDtor();
}

void ControlPoints::SharedDtor() {
}

void ControlPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlPoints_descriptor_;
}

const ControlPoints& ControlPoints::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ControlPoints> ControlPoints_default_instance_;

ControlPoints* ControlPoints::New(::google::protobuf::Arena* arena) const {
  ControlPoints* n = new ControlPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.ControlPoints)
  point_.Clear();
  links_.Clear();
  boundarycontrols_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ControlPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.ControlPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OptCAD.proto.ReferencePoint point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        if (input->ExpectTag(18)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .OptCAD.proto.Link links = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_links;
        if (input->ExpectTag(26)) goto parse_loop_boundaryControls;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .OptCAD.proto.BoundaryControl boundaryControls = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_boundaryControls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_boundarycontrols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_boundaryControls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.ControlPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.ControlPoints)
  return false;
#undef DO_
}

void ControlPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.ControlPoints)
  // repeated .OptCAD.proto.ReferencePoint point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  // repeated .OptCAD.proto.Link links = 2;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->links(i), output);
  }

  // repeated .OptCAD.proto.BoundaryControl boundaryControls = 3;
  for (unsigned int i = 0, n = this->boundarycontrols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boundarycontrols(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.ControlPoints)
}

::google::protobuf::uint8* ControlPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.ControlPoints)
  // repeated .OptCAD.proto.ReferencePoint point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  // repeated .OptCAD.proto.Link links = 2;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->links(i), false, target);
  }

  // repeated .OptCAD.proto.BoundaryControl boundaryControls = 3;
  for (unsigned int i = 0, n = this->boundarycontrols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->boundarycontrols(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.ControlPoints)
  return target;
}

size_t ControlPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.ControlPoints)
  size_t total_size = 0;

  // repeated .OptCAD.proto.ReferencePoint point = 1;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  // repeated .OptCAD.proto.Link links = 2;
  {
    unsigned int count = this->links_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->links(i));
    }
  }

  // repeated .OptCAD.proto.BoundaryControl boundaryControls = 3;
  {
    unsigned int count = this->boundarycontrols_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundarycontrols(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.ControlPoints)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControlPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.ControlPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.ControlPoints)
    UnsafeMergeFrom(*source);
  }
}

void ControlPoints::MergeFrom(const ControlPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.ControlPoints)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ControlPoints::UnsafeMergeFrom(const ControlPoints& from) {
  GOOGLE_DCHECK(&from != this);
  point_.MergeFrom(from.point_);
  links_.MergeFrom(from.links_);
  boundarycontrols_.MergeFrom(from.boundarycontrols_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ControlPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.ControlPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlPoints::CopyFrom(const ControlPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.ControlPoints)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ControlPoints::IsInitialized() const {

  return true;
}

void ControlPoints::Swap(ControlPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlPoints::InternalSwap(ControlPoints* other) {
  point_.UnsafeArenaSwap(&other->point_);
  links_.UnsafeArenaSwap(&other->links_);
  boundarycontrols_.UnsafeArenaSwap(&other->boundarycontrols_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlPoints_descriptor_;
  metadata.reflection = ControlPoints_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlPoints

// repeated .OptCAD.proto.ReferencePoint point = 1;
int ControlPoints::point_size() const {
  return point_.size();
}
void ControlPoints::clear_point() {
  point_.Clear();
}
const ::OptCAD::proto::ReferencePoint& ControlPoints::point(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.ControlPoints.point)
  return point_.Get(index);
}
::OptCAD::proto::ReferencePoint* ControlPoints::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.ControlPoints.point)
  return point_.Mutable(index);
}
::OptCAD::proto::ReferencePoint* ControlPoints::add_point() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.ControlPoints.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::ReferencePoint >*
ControlPoints::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.ControlPoints.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::ReferencePoint >&
ControlPoints::point() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.ControlPoints.point)
  return point_;
}

// repeated .OptCAD.proto.Link links = 2;
int ControlPoints::links_size() const {
  return links_.size();
}
void ControlPoints::clear_links() {
  links_.Clear();
}
const ::OptCAD::proto::Link& ControlPoints::links(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.ControlPoints.links)
  return links_.Get(index);
}
::OptCAD::proto::Link* ControlPoints::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.ControlPoints.links)
  return links_.Mutable(index);
}
::OptCAD::proto::Link* ControlPoints::add_links() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.ControlPoints.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::Link >*
ControlPoints::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.ControlPoints.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::Link >&
ControlPoints::links() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.ControlPoints.links)
  return links_;
}

// repeated .OptCAD.proto.BoundaryControl boundaryControls = 3;
int ControlPoints::boundarycontrols_size() const {
  return boundarycontrols_.size();
}
void ControlPoints::clear_boundarycontrols() {
  boundarycontrols_.Clear();
}
const ::OptCAD::proto::BoundaryControl& ControlPoints::boundarycontrols(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.ControlPoints.boundaryControls)
  return boundarycontrols_.Get(index);
}
::OptCAD::proto::BoundaryControl* ControlPoints::mutable_boundarycontrols(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.ControlPoints.boundaryControls)
  return boundarycontrols_.Mutable(index);
}
::OptCAD::proto::BoundaryControl* ControlPoints::add_boundarycontrols() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.ControlPoints.boundaryControls)
  return boundarycontrols_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::BoundaryControl >*
ControlPoints::mutable_boundarycontrols() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.ControlPoints.boundaryControls)
  return &boundarycontrols_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::BoundaryControl >&
ControlPoints::boundarycontrols() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.ControlPoints.boundaryControls)
  return boundarycontrols_;
}

inline const ControlPoints* ControlPoints::internal_default_instance() {
  return &ControlPoints_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TetMesh::kVerticesFieldNumber;
const int TetMesh::kTetsFieldNumber;
const int TetMesh::kBoundaryConditionsFieldNumber;
const int TetMesh::kPrecomputedPhysicsFieldNumber;
const int TetMesh::kFilenameFieldNumber;
const int TetMesh::kControlPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TetMesh::TetMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.TetMesh)
}

void TetMesh::InitAsDefaultInstance() {
  controlpoints_ = const_cast< ::OptCAD::proto::ControlPoints*>(
      ::OptCAD::proto::ControlPoints::internal_default_instance());
}

TetMesh::TetMesh(const TetMesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.TetMesh)
}

void TetMesh::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controlpoints_ = NULL;
}

TetMesh::~TetMesh() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.TetMesh)
  SharedDtor();
}

void TetMesh::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TetMesh_default_instance_.get()) {
    delete controlpoints_;
  }
}

void TetMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TetMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TetMesh_descriptor_;
}

const TetMesh& TetMesh::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TetMesh> TetMesh_default_instance_;

TetMesh* TetMesh::New(::google::protobuf::Arena* arena) const {
  TetMesh* n = new TetMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TetMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.TetMesh)
  if (_has_bits_[0 / 32] & 48u) {
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_controlpoints()) {
      if (controlpoints_ != NULL) controlpoints_->::OptCAD::proto::ControlPoints::Clear();
    }
  }
  vertices_.Clear();
  tets_.Clear();
  boundaryconditions_.Clear();
  precomputedphysics_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TetMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.TetMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OptCAD.proto.Vector3d vertices = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_vertices;
        if (input->ExpectTag(18)) goto parse_loop_tets;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .OptCAD.proto.Vector4i tets = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tets;
        if (input->ExpectTag(26)) goto parse_loop_boundaryConditions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .OptCAD.proto.BoundaryCondition boundaryConditions = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_boundaryConditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_boundaryconditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_boundaryConditions;
        if (input->ExpectTag(34)) goto parse_loop_precomputedPhysics;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .OptCAD.proto.PrecomputedPhysics precomputedPhysics = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_precomputedPhysics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_precomputedphysics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_precomputedPhysics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_filename;
        break;
      }

      // optional string filename = 5;
      case 5: {
        if (tag == 42) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OptCAD.proto.TetMesh.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_controlPoints;
        break;
      }

      // optional .OptCAD.proto.ControlPoints controlPoints = 6;
      case 6: {
        if (tag == 50) {
         parse_controlPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controlpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.TetMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.TetMesh)
  return false;
#undef DO_
}

void TetMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.TetMesh)
  // repeated .OptCAD.proto.Vector3d vertices = 1;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertices(i), output);
  }

  // repeated .OptCAD.proto.Vector4i tets = 2;
  for (unsigned int i = 0, n = this->tets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tets(i), output);
  }

  // repeated .OptCAD.proto.BoundaryCondition boundaryConditions = 3;
  for (unsigned int i = 0, n = this->boundaryconditions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boundaryconditions(i), output);
  }

  // repeated .OptCAD.proto.PrecomputedPhysics precomputedPhysics = 4;
  for (unsigned int i = 0, n = this->precomputedphysics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->precomputedphysics(i), output);
  }

  // optional string filename = 5;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.TetMesh.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filename(), output);
  }

  // optional .OptCAD.proto.ControlPoints controlPoints = 6;
  if (has_controlpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->controlpoints_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.TetMesh)
}

::google::protobuf::uint8* TetMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.TetMesh)
  // repeated .OptCAD.proto.Vector3d vertices = 1;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->vertices(i), false, target);
  }

  // repeated .OptCAD.proto.Vector4i tets = 2;
  for (unsigned int i = 0, n = this->tets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tets(i), false, target);
  }

  // repeated .OptCAD.proto.BoundaryCondition boundaryConditions = 3;
  for (unsigned int i = 0, n = this->boundaryconditions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->boundaryconditions(i), false, target);
  }

  // repeated .OptCAD.proto.PrecomputedPhysics precomputedPhysics = 4;
  for (unsigned int i = 0, n = this->precomputedphysics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->precomputedphysics(i), false, target);
  }

  // optional string filename = 5;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OptCAD.proto.TetMesh.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filename(), target);
  }

  // optional .OptCAD.proto.ControlPoints controlPoints = 6;
  if (has_controlpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->controlpoints_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.TetMesh)
  return target;
}

size_t TetMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.TetMesh)
  size_t total_size = 0;

  if (_has_bits_[4 / 32] & 48u) {
    // optional string filename = 5;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional .OptCAD.proto.ControlPoints controlPoints = 6;
    if (has_controlpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->controlpoints_);
    }

  }
  // repeated .OptCAD.proto.Vector3d vertices = 1;
  {
    unsigned int count = this->vertices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertices(i));
    }
  }

  // repeated .OptCAD.proto.Vector4i tets = 2;
  {
    unsigned int count = this->tets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tets(i));
    }
  }

  // repeated .OptCAD.proto.BoundaryCondition boundaryConditions = 3;
  {
    unsigned int count = this->boundaryconditions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundaryconditions(i));
    }
  }

  // repeated .OptCAD.proto.PrecomputedPhysics precomputedPhysics = 4;
  {
    unsigned int count = this->precomputedphysics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->precomputedphysics(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TetMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.TetMesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TetMesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TetMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.TetMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.TetMesh)
    UnsafeMergeFrom(*source);
  }
}

void TetMesh::MergeFrom(const TetMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.TetMesh)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TetMesh::UnsafeMergeFrom(const TetMesh& from) {
  GOOGLE_DCHECK(&from != this);
  vertices_.MergeFrom(from.vertices_);
  tets_.MergeFrom(from.tets_);
  boundaryconditions_.MergeFrom(from.boundaryconditions_);
  precomputedphysics_.MergeFrom(from.precomputedphysics_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_controlpoints()) {
      mutable_controlpoints()->::OptCAD::proto::ControlPoints::MergeFrom(from.controlpoints());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TetMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.TetMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TetMesh::CopyFrom(const TetMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.TetMesh)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TetMesh::IsInitialized() const {

  return true;
}

void TetMesh::Swap(TetMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TetMesh::InternalSwap(TetMesh* other) {
  vertices_.UnsafeArenaSwap(&other->vertices_);
  tets_.UnsafeArenaSwap(&other->tets_);
  boundaryconditions_.UnsafeArenaSwap(&other->boundaryconditions_);
  precomputedphysics_.UnsafeArenaSwap(&other->precomputedphysics_);
  filename_.Swap(&other->filename_);
  std::swap(controlpoints_, other->controlpoints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TetMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TetMesh_descriptor_;
  metadata.reflection = TetMesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TetMesh

// repeated .OptCAD.proto.Vector3d vertices = 1;
int TetMesh::vertices_size() const {
  return vertices_.size();
}
void TetMesh::clear_vertices() {
  vertices_.Clear();
}
const ::OptCAD::proto::Vector3d& TetMesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.TetMesh.vertices)
  return vertices_.Get(index);
}
::OptCAD::proto::Vector3d* TetMesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.TetMesh.vertices)
  return vertices_.Mutable(index);
}
::OptCAD::proto::Vector3d* TetMesh::add_vertices() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.TetMesh.vertices)
  return vertices_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::Vector3d >*
TetMesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.TetMesh.vertices)
  return &vertices_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::Vector3d >&
TetMesh::vertices() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.TetMesh.vertices)
  return vertices_;
}

// repeated .OptCAD.proto.Vector4i tets = 2;
int TetMesh::tets_size() const {
  return tets_.size();
}
void TetMesh::clear_tets() {
  tets_.Clear();
}
const ::OptCAD::proto::Vector4i& TetMesh::tets(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.TetMesh.tets)
  return tets_.Get(index);
}
::OptCAD::proto::Vector4i* TetMesh::mutable_tets(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.TetMesh.tets)
  return tets_.Mutable(index);
}
::OptCAD::proto::Vector4i* TetMesh::add_tets() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.TetMesh.tets)
  return tets_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::Vector4i >*
TetMesh::mutable_tets() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.TetMesh.tets)
  return &tets_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::Vector4i >&
TetMesh::tets() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.TetMesh.tets)
  return tets_;
}

// repeated .OptCAD.proto.BoundaryCondition boundaryConditions = 3;
int TetMesh::boundaryconditions_size() const {
  return boundaryconditions_.size();
}
void TetMesh::clear_boundaryconditions() {
  boundaryconditions_.Clear();
}
const ::OptCAD::proto::BoundaryCondition& TetMesh::boundaryconditions(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.TetMesh.boundaryConditions)
  return boundaryconditions_.Get(index);
}
::OptCAD::proto::BoundaryCondition* TetMesh::mutable_boundaryconditions(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.TetMesh.boundaryConditions)
  return boundaryconditions_.Mutable(index);
}
::OptCAD::proto::BoundaryCondition* TetMesh::add_boundaryconditions() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.TetMesh.boundaryConditions)
  return boundaryconditions_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::BoundaryCondition >*
TetMesh::mutable_boundaryconditions() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.TetMesh.boundaryConditions)
  return &boundaryconditions_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::BoundaryCondition >&
TetMesh::boundaryconditions() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.TetMesh.boundaryConditions)
  return boundaryconditions_;
}

// repeated .OptCAD.proto.PrecomputedPhysics precomputedPhysics = 4;
int TetMesh::precomputedphysics_size() const {
  return precomputedphysics_.size();
}
void TetMesh::clear_precomputedphysics() {
  precomputedphysics_.Clear();
}
const ::OptCAD::proto::PrecomputedPhysics& TetMesh::precomputedphysics(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.TetMesh.precomputedPhysics)
  return precomputedphysics_.Get(index);
}
::OptCAD::proto::PrecomputedPhysics* TetMesh::mutable_precomputedphysics(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.TetMesh.precomputedPhysics)
  return precomputedphysics_.Mutable(index);
}
::OptCAD::proto::PrecomputedPhysics* TetMesh::add_precomputedphysics() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.TetMesh.precomputedPhysics)
  return precomputedphysics_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::PrecomputedPhysics >*
TetMesh::mutable_precomputedphysics() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.TetMesh.precomputedPhysics)
  return &precomputedphysics_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::PrecomputedPhysics >&
TetMesh::precomputedphysics() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.TetMesh.precomputedPhysics)
  return precomputedphysics_;
}

// optional string filename = 5;
bool TetMesh::has_filename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TetMesh::set_has_filename() {
  _has_bits_[0] |= 0x00000010u;
}
void TetMesh::clear_has_filename() {
  _has_bits_[0] &= ~0x00000010u;
}
void TetMesh::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& TetMesh::filename() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.TetMesh.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TetMesh::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.TetMesh.filename)
}
void TetMesh::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OptCAD.proto.TetMesh.filename)
}
void TetMesh::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OptCAD.proto.TetMesh.filename)
}
::std::string* TetMesh::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.TetMesh.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TetMesh::release_filename() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.TetMesh.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TetMesh::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.TetMesh.filename)
}

// optional .OptCAD.proto.ControlPoints controlPoints = 6;
bool TetMesh::has_controlpoints() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TetMesh::set_has_controlpoints() {
  _has_bits_[0] |= 0x00000020u;
}
void TetMesh::clear_has_controlpoints() {
  _has_bits_[0] &= ~0x00000020u;
}
void TetMesh::clear_controlpoints() {
  if (controlpoints_ != NULL) controlpoints_->::OptCAD::proto::ControlPoints::Clear();
  clear_has_controlpoints();
}
const ::OptCAD::proto::ControlPoints& TetMesh::controlpoints() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.TetMesh.controlPoints)
  return controlpoints_ != NULL ? *controlpoints_
                         : *::OptCAD::proto::ControlPoints::internal_default_instance();
}
::OptCAD::proto::ControlPoints* TetMesh::mutable_controlpoints() {
  set_has_controlpoints();
  if (controlpoints_ == NULL) {
    controlpoints_ = new ::OptCAD::proto::ControlPoints;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.TetMesh.controlPoints)
  return controlpoints_;
}
::OptCAD::proto::ControlPoints* TetMesh::release_controlpoints() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.TetMesh.controlPoints)
  clear_has_controlpoints();
  ::OptCAD::proto::ControlPoints* temp = controlpoints_;
  controlpoints_ = NULL;
  return temp;
}
void TetMesh::set_allocated_controlpoints(::OptCAD::proto::ControlPoints* controlpoints) {
  delete controlpoints_;
  controlpoints_ = controlpoints;
  if (controlpoints) {
    set_has_controlpoints();
  } else {
    clear_has_controlpoints();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.TetMesh.controlPoints)
}

inline const TetMesh* TetMesh::internal_default_instance() {
  return &TetMesh_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShapeInfo::kFunctionShapeInfoFieldNumber;
const int ShapeInfo::kTetMeshFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShapeInfo::ShapeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.ShapeInfo)
}

void ShapeInfo::InitAsDefaultInstance() {
  functionshapeinfo_ = const_cast< ::OptCAD::proto::FunctionTestShapeInfo*>(
      ::OptCAD::proto::FunctionTestShapeInfo::internal_default_instance());
  tetmesh_ = const_cast< ::OptCAD::proto::TetMesh*>(
      ::OptCAD::proto::TetMesh::internal_default_instance());
}

ShapeInfo::ShapeInfo(const ShapeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.ShapeInfo)
}

void ShapeInfo::SharedCtor() {
  _cached_size_ = 0;
  functionshapeinfo_ = NULL;
  tetmesh_ = NULL;
}

ShapeInfo::~ShapeInfo() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.ShapeInfo)
  SharedDtor();
}

void ShapeInfo::SharedDtor() {
  if (this != &ShapeInfo_default_instance_.get()) {
    delete functionshapeinfo_;
    delete tetmesh_;
  }
}

void ShapeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeInfo_descriptor_;
}

const ShapeInfo& ShapeInfo::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ShapeInfo> ShapeInfo_default_instance_;

ShapeInfo* ShapeInfo::New(::google::protobuf::Arena* arena) const {
  ShapeInfo* n = new ShapeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShapeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.ShapeInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_functionshapeinfo()) {
      if (functionshapeinfo_ != NULL) functionshapeinfo_->::OptCAD::proto::FunctionTestShapeInfo::Clear();
    }
    if (has_tetmesh()) {
      if (tetmesh_ != NULL) tetmesh_->::OptCAD::proto::TetMesh::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShapeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.ShapeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OptCAD.proto.FunctionTestShapeInfo functionShapeInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_functionshapeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tetMesh;
        break;
      }

      // optional .OptCAD.proto.TetMesh tetMesh = 2;
      case 2: {
        if (tag == 18) {
         parse_tetMesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tetmesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.ShapeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.ShapeInfo)
  return false;
#undef DO_
}

void ShapeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.ShapeInfo)
  // optional .OptCAD.proto.FunctionTestShapeInfo functionShapeInfo = 1;
  if (has_functionshapeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->functionshapeinfo_, output);
  }

  // optional .OptCAD.proto.TetMesh tetMesh = 2;
  if (has_tetmesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tetmesh_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.ShapeInfo)
}

::google::protobuf::uint8* ShapeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.ShapeInfo)
  // optional .OptCAD.proto.FunctionTestShapeInfo functionShapeInfo = 1;
  if (has_functionshapeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->functionshapeinfo_, false, target);
  }

  // optional .OptCAD.proto.TetMesh tetMesh = 2;
  if (has_tetmesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tetmesh_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.ShapeInfo)
  return target;
}

size_t ShapeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.ShapeInfo)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .OptCAD.proto.FunctionTestShapeInfo functionShapeInfo = 1;
    if (has_functionshapeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->functionshapeinfo_);
    }

    // optional .OptCAD.proto.TetMesh tetMesh = 2;
    if (has_tetmesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tetmesh_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.ShapeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShapeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShapeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.ShapeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.ShapeInfo)
    UnsafeMergeFrom(*source);
  }
}

void ShapeInfo::MergeFrom(const ShapeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.ShapeInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ShapeInfo::UnsafeMergeFrom(const ShapeInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_functionshapeinfo()) {
      mutable_functionshapeinfo()->::OptCAD::proto::FunctionTestShapeInfo::MergeFrom(from.functionshapeinfo());
    }
    if (from.has_tetmesh()) {
      mutable_tetmesh()->::OptCAD::proto::TetMesh::MergeFrom(from.tetmesh());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ShapeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.ShapeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeInfo::CopyFrom(const ShapeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.ShapeInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ShapeInfo::IsInitialized() const {

  return true;
}

void ShapeInfo::Swap(ShapeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShapeInfo::InternalSwap(ShapeInfo* other) {
  std::swap(functionshapeinfo_, other->functionshapeinfo_);
  std::swap(tetmesh_, other->tetmesh_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShapeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeInfo_descriptor_;
  metadata.reflection = ShapeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShapeInfo

// optional .OptCAD.proto.FunctionTestShapeInfo functionShapeInfo = 1;
bool ShapeInfo::has_functionshapeinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShapeInfo::set_has_functionshapeinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void ShapeInfo::clear_has_functionshapeinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShapeInfo::clear_functionshapeinfo() {
  if (functionshapeinfo_ != NULL) functionshapeinfo_->::OptCAD::proto::FunctionTestShapeInfo::Clear();
  clear_has_functionshapeinfo();
}
const ::OptCAD::proto::FunctionTestShapeInfo& ShapeInfo::functionshapeinfo() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.ShapeInfo.functionShapeInfo)
  return functionshapeinfo_ != NULL ? *functionshapeinfo_
                         : *::OptCAD::proto::FunctionTestShapeInfo::internal_default_instance();
}
::OptCAD::proto::FunctionTestShapeInfo* ShapeInfo::mutable_functionshapeinfo() {
  set_has_functionshapeinfo();
  if (functionshapeinfo_ == NULL) {
    functionshapeinfo_ = new ::OptCAD::proto::FunctionTestShapeInfo;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.ShapeInfo.functionShapeInfo)
  return functionshapeinfo_;
}
::OptCAD::proto::FunctionTestShapeInfo* ShapeInfo::release_functionshapeinfo() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.ShapeInfo.functionShapeInfo)
  clear_has_functionshapeinfo();
  ::OptCAD::proto::FunctionTestShapeInfo* temp = functionshapeinfo_;
  functionshapeinfo_ = NULL;
  return temp;
}
void ShapeInfo::set_allocated_functionshapeinfo(::OptCAD::proto::FunctionTestShapeInfo* functionshapeinfo) {
  delete functionshapeinfo_;
  functionshapeinfo_ = functionshapeinfo;
  if (functionshapeinfo) {
    set_has_functionshapeinfo();
  } else {
    clear_has_functionshapeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.ShapeInfo.functionShapeInfo)
}

// optional .OptCAD.proto.TetMesh tetMesh = 2;
bool ShapeInfo::has_tetmesh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShapeInfo::set_has_tetmesh() {
  _has_bits_[0] |= 0x00000002u;
}
void ShapeInfo::clear_has_tetmesh() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShapeInfo::clear_tetmesh() {
  if (tetmesh_ != NULL) tetmesh_->::OptCAD::proto::TetMesh::Clear();
  clear_has_tetmesh();
}
const ::OptCAD::proto::TetMesh& ShapeInfo::tetmesh() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.ShapeInfo.tetMesh)
  return tetmesh_ != NULL ? *tetmesh_
                         : *::OptCAD::proto::TetMesh::internal_default_instance();
}
::OptCAD::proto::TetMesh* ShapeInfo::mutable_tetmesh() {
  set_has_tetmesh();
  if (tetmesh_ == NULL) {
    tetmesh_ = new ::OptCAD::proto::TetMesh;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.ShapeInfo.tetMesh)
  return tetmesh_;
}
::OptCAD::proto::TetMesh* ShapeInfo::release_tetmesh() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.ShapeInfo.tetMesh)
  clear_has_tetmesh();
  ::OptCAD::proto::TetMesh* temp = tetmesh_;
  tetmesh_ = NULL;
  return temp;
}
void ShapeInfo::set_allocated_tetmesh(::OptCAD::proto::TetMesh* tetmesh) {
  delete tetmesh_;
  tetmesh_ = tetmesh;
  if (tetmesh) {
    set_has_tetmesh();
  } else {
    clear_has_tetmesh();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.ShapeInfo.tetMesh)
}

inline const ShapeInfo* ShapeInfo::internal_default_instance() {
  return &ShapeInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasisFunction::kLinearBsplineFieldNumber;
const int BasisFunction::kCubicBsplineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasisFunction::BasisFunction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.BasisFunction)
}

void BasisFunction::InitAsDefaultInstance() {
  linearbspline_ = const_cast< ::OptCAD::proto::LinearBSpline*>(
      ::OptCAD::proto::LinearBSpline::internal_default_instance());
  cubicbspline_ = const_cast< ::OptCAD::proto::CubicBSpline*>(
      ::OptCAD::proto::CubicBSpline::internal_default_instance());
}

BasisFunction::BasisFunction(const BasisFunction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.BasisFunction)
}

void BasisFunction::SharedCtor() {
  _cached_size_ = 0;
  linearbspline_ = NULL;
  cubicbspline_ = NULL;
}

BasisFunction::~BasisFunction() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.BasisFunction)
  SharedDtor();
}

void BasisFunction::SharedDtor() {
  if (this != &BasisFunction_default_instance_.get()) {
    delete linearbspline_;
    delete cubicbspline_;
  }
}

void BasisFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasisFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasisFunction_descriptor_;
}

const BasisFunction& BasisFunction::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BasisFunction> BasisFunction_default_instance_;

BasisFunction* BasisFunction::New(::google::protobuf::Arena* arena) const {
  BasisFunction* n = new BasisFunction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasisFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.BasisFunction)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_linearbspline()) {
      if (linearbspline_ != NULL) linearbspline_->::OptCAD::proto::LinearBSpline::Clear();
    }
    if (has_cubicbspline()) {
      if (cubicbspline_ != NULL) cubicbspline_->::OptCAD::proto::CubicBSpline::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BasisFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.BasisFunction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OptCAD.proto.LinearBSpline linearBspline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linearbspline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cubicBspline;
        break;
      }

      // optional .OptCAD.proto.CubicBSpline cubicBspline = 2;
      case 2: {
        if (tag == 18) {
         parse_cubicBspline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cubicbspline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.BasisFunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.BasisFunction)
  return false;
#undef DO_
}

void BasisFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.BasisFunction)
  // optional .OptCAD.proto.LinearBSpline linearBspline = 1;
  if (has_linearbspline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linearbspline_, output);
  }

  // optional .OptCAD.proto.CubicBSpline cubicBspline = 2;
  if (has_cubicbspline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cubicbspline_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.BasisFunction)
}

::google::protobuf::uint8* BasisFunction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.BasisFunction)
  // optional .OptCAD.proto.LinearBSpline linearBspline = 1;
  if (has_linearbspline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->linearbspline_, false, target);
  }

  // optional .OptCAD.proto.CubicBSpline cubicBspline = 2;
  if (has_cubicbspline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cubicbspline_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.BasisFunction)
  return target;
}

size_t BasisFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.BasisFunction)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .OptCAD.proto.LinearBSpline linearBspline = 1;
    if (has_linearbspline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linearbspline_);
    }

    // optional .OptCAD.proto.CubicBSpline cubicBspline = 2;
    if (has_cubicbspline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cubicbspline_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasisFunction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.BasisFunction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BasisFunction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasisFunction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.BasisFunction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.BasisFunction)
    UnsafeMergeFrom(*source);
  }
}

void BasisFunction::MergeFrom(const BasisFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.BasisFunction)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BasisFunction::UnsafeMergeFrom(const BasisFunction& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linearbspline()) {
      mutable_linearbspline()->::OptCAD::proto::LinearBSpline::MergeFrom(from.linearbspline());
    }
    if (from.has_cubicbspline()) {
      mutable_cubicbspline()->::OptCAD::proto::CubicBSpline::MergeFrom(from.cubicbspline());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BasisFunction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.BasisFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasisFunction::CopyFrom(const BasisFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.BasisFunction)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BasisFunction::IsInitialized() const {

  return true;
}

void BasisFunction::Swap(BasisFunction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasisFunction::InternalSwap(BasisFunction* other) {
  std::swap(linearbspline_, other->linearbspline_);
  std::swap(cubicbspline_, other->cubicbspline_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasisFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasisFunction_descriptor_;
  metadata.reflection = BasisFunction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasisFunction

// optional .OptCAD.proto.LinearBSpline linearBspline = 1;
bool BasisFunction::has_linearbspline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BasisFunction::set_has_linearbspline() {
  _has_bits_[0] |= 0x00000001u;
}
void BasisFunction::clear_has_linearbspline() {
  _has_bits_[0] &= ~0x00000001u;
}
void BasisFunction::clear_linearbspline() {
  if (linearbspline_ != NULL) linearbspline_->::OptCAD::proto::LinearBSpline::Clear();
  clear_has_linearbspline();
}
const ::OptCAD::proto::LinearBSpline& BasisFunction::linearbspline() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BasisFunction.linearBspline)
  return linearbspline_ != NULL ? *linearbspline_
                         : *::OptCAD::proto::LinearBSpline::internal_default_instance();
}
::OptCAD::proto::LinearBSpline* BasisFunction::mutable_linearbspline() {
  set_has_linearbspline();
  if (linearbspline_ == NULL) {
    linearbspline_ = new ::OptCAD::proto::LinearBSpline;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.BasisFunction.linearBspline)
  return linearbspline_;
}
::OptCAD::proto::LinearBSpline* BasisFunction::release_linearbspline() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.BasisFunction.linearBspline)
  clear_has_linearbspline();
  ::OptCAD::proto::LinearBSpline* temp = linearbspline_;
  linearbspline_ = NULL;
  return temp;
}
void BasisFunction::set_allocated_linearbspline(::OptCAD::proto::LinearBSpline* linearbspline) {
  delete linearbspline_;
  linearbspline_ = linearbspline;
  if (linearbspline) {
    set_has_linearbspline();
  } else {
    clear_has_linearbspline();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.BasisFunction.linearBspline)
}

// optional .OptCAD.proto.CubicBSpline cubicBspline = 2;
bool BasisFunction::has_cubicbspline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BasisFunction::set_has_cubicbspline() {
  _has_bits_[0] |= 0x00000002u;
}
void BasisFunction::clear_has_cubicbspline() {
  _has_bits_[0] &= ~0x00000002u;
}
void BasisFunction::clear_cubicbspline() {
  if (cubicbspline_ != NULL) cubicbspline_->::OptCAD::proto::CubicBSpline::Clear();
  clear_has_cubicbspline();
}
const ::OptCAD::proto::CubicBSpline& BasisFunction::cubicbspline() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.BasisFunction.cubicBspline)
  return cubicbspline_ != NULL ? *cubicbspline_
                         : *::OptCAD::proto::CubicBSpline::internal_default_instance();
}
::OptCAD::proto::CubicBSpline* BasisFunction::mutable_cubicbspline() {
  set_has_cubicbspline();
  if (cubicbspline_ == NULL) {
    cubicbspline_ = new ::OptCAD::proto::CubicBSpline;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.BasisFunction.cubicBspline)
  return cubicbspline_;
}
::OptCAD::proto::CubicBSpline* BasisFunction::release_cubicbspline() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.BasisFunction.cubicBspline)
  clear_has_cubicbspline();
  ::OptCAD::proto::CubicBSpline* temp = cubicbspline_;
  cubicbspline_ = NULL;
  return temp;
}
void BasisFunction::set_allocated_cubicbspline(::OptCAD::proto::CubicBSpline* cubicbspline) {
  delete cubicbspline_;
  cubicbspline_ = cubicbspline;
  if (cubicbspline) {
    set_has_cubicbspline();
  } else {
    clear_has_cubicbspline();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.BasisFunction.cubicBspline)
}

inline const BasisFunction* BasisFunction::internal_default_instance() {
  return &BasisFunction_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinearBSpline::kCenterFieldNumber;
const int LinearBSpline::kSupportFieldNumber;
const int LinearBSpline::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinearBSpline::LinearBSpline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.LinearBSpline)
}

void LinearBSpline::InitAsDefaultInstance() {
}

LinearBSpline::LinearBSpline(const LinearBSpline& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.LinearBSpline)
}

void LinearBSpline::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
}

LinearBSpline::~LinearBSpline() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.LinearBSpline)
  SharedDtor();
}

void LinearBSpline::SharedDtor() {
}

void LinearBSpline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearBSpline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearBSpline_descriptor_;
}

const LinearBSpline& LinearBSpline::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LinearBSpline> LinearBSpline_default_instance_;

LinearBSpline* LinearBSpline::New(::google::protobuf::Arena* arena) const {
  LinearBSpline* n = new LinearBSpline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinearBSpline::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.LinearBSpline)
  weight_ = 0;
  center_.Clear();
  support_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LinearBSpline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.LinearBSpline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double center = 1;
      case 1: {
        if (tag == 9) {
         parse_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_center())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_center())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_center;
        if (input->ExpectTag(17)) goto parse_support;
        break;
      }

      // repeated double support = 2;
      case 2: {
        if (tag == 17) {
         parse_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_support())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_support())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_support;
        if (input->ExpectTag(25)) goto parse_weight;
        break;
      }

      // optional double weight = 3;
      case 3: {
        if (tag == 25) {
         parse_weight:
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.LinearBSpline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.LinearBSpline)
  return false;
#undef DO_
}

void LinearBSpline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.LinearBSpline)
  // repeated double center = 1;
  for (int i = 0; i < this->center_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->center(i), output);
  }

  // repeated double support = 2;
  for (int i = 0; i < this->support_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->support(i), output);
  }

  // optional double weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.LinearBSpline)
}

::google::protobuf::uint8* LinearBSpline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.LinearBSpline)
  // repeated double center = 1;
  for (int i = 0; i < this->center_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->center(i), target);
  }

  // repeated double support = 2;
  for (int i = 0; i < this->support_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->support(i), target);
  }

  // optional double weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.LinearBSpline)
  return target;
}

size_t LinearBSpline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.LinearBSpline)
  size_t total_size = 0;

  // optional double weight = 3;
  if (has_weight()) {
    total_size += 1 + 8;
  }

  // repeated double center = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->center_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->center_size());
    total_size += data_size;
  }

  // repeated double support = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->support_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->support_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearBSpline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.LinearBSpline)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LinearBSpline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinearBSpline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.LinearBSpline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.LinearBSpline)
    UnsafeMergeFrom(*source);
  }
}

void LinearBSpline::MergeFrom(const LinearBSpline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.LinearBSpline)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LinearBSpline::UnsafeMergeFrom(const LinearBSpline& from) {
  GOOGLE_DCHECK(&from != this);
  center_.UnsafeMergeFrom(from.center_);
  support_.UnsafeMergeFrom(from.support_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LinearBSpline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.LinearBSpline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearBSpline::CopyFrom(const LinearBSpline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.LinearBSpline)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LinearBSpline::IsInitialized() const {

  return true;
}

void LinearBSpline::Swap(LinearBSpline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinearBSpline::InternalSwap(LinearBSpline* other) {
  center_.UnsafeArenaSwap(&other->center_);
  support_.UnsafeArenaSwap(&other->support_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinearBSpline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearBSpline_descriptor_;
  metadata.reflection = LinearBSpline_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinearBSpline

// repeated double center = 1;
int LinearBSpline::center_size() const {
  return center_.size();
}
void LinearBSpline::clear_center() {
  center_.Clear();
}
double LinearBSpline::center(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.LinearBSpline.center)
  return center_.Get(index);
}
void LinearBSpline::set_center(int index, double value) {
  center_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.LinearBSpline.center)
}
void LinearBSpline::add_center(double value) {
  center_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.LinearBSpline.center)
}
const ::google::protobuf::RepeatedField< double >&
LinearBSpline::center() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.LinearBSpline.center)
  return center_;
}
::google::protobuf::RepeatedField< double >*
LinearBSpline::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.LinearBSpline.center)
  return &center_;
}

// repeated double support = 2;
int LinearBSpline::support_size() const {
  return support_.size();
}
void LinearBSpline::clear_support() {
  support_.Clear();
}
double LinearBSpline::support(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.LinearBSpline.support)
  return support_.Get(index);
}
void LinearBSpline::set_support(int index, double value) {
  support_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.LinearBSpline.support)
}
void LinearBSpline::add_support(double value) {
  support_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.LinearBSpline.support)
}
const ::google::protobuf::RepeatedField< double >&
LinearBSpline::support() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.LinearBSpline.support)
  return support_;
}
::google::protobuf::RepeatedField< double >*
LinearBSpline::mutable_support() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.LinearBSpline.support)
  return &support_;
}

// optional double weight = 3;
bool LinearBSpline::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LinearBSpline::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void LinearBSpline::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void LinearBSpline::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
double LinearBSpline::weight() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.LinearBSpline.weight)
  return weight_;
}
void LinearBSpline::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.LinearBSpline.weight)
}

inline const LinearBSpline* LinearBSpline::internal_default_instance() {
  return &LinearBSpline_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CubicBSpline::kCenterFieldNumber;
const int CubicBSpline::kSupportFieldNumber;
const int CubicBSpline::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CubicBSpline::CubicBSpline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.CubicBSpline)
}

void CubicBSpline::InitAsDefaultInstance() {
}

CubicBSpline::CubicBSpline(const CubicBSpline& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.CubicBSpline)
}

void CubicBSpline::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
}

CubicBSpline::~CubicBSpline() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.CubicBSpline)
  SharedDtor();
}

void CubicBSpline::SharedDtor() {
}

void CubicBSpline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CubicBSpline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CubicBSpline_descriptor_;
}

const CubicBSpline& CubicBSpline::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CubicBSpline> CubicBSpline_default_instance_;

CubicBSpline* CubicBSpline::New(::google::protobuf::Arena* arena) const {
  CubicBSpline* n = new CubicBSpline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CubicBSpline::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.CubicBSpline)
  weight_ = 0;
  center_.Clear();
  support_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CubicBSpline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.CubicBSpline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double center = 1;
      case 1: {
        if (tag == 9) {
         parse_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_center())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_center())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_center;
        if (input->ExpectTag(17)) goto parse_support;
        break;
      }

      // repeated double support = 2;
      case 2: {
        if (tag == 17) {
         parse_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_support())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_support())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_support;
        if (input->ExpectTag(25)) goto parse_weight;
        break;
      }

      // optional double weight = 3;
      case 3: {
        if (tag == 25) {
         parse_weight:
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.CubicBSpline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.CubicBSpline)
  return false;
#undef DO_
}

void CubicBSpline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.CubicBSpline)
  // repeated double center = 1;
  for (int i = 0; i < this->center_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->center(i), output);
  }

  // repeated double support = 2;
  for (int i = 0; i < this->support_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->support(i), output);
  }

  // optional double weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.CubicBSpline)
}

::google::protobuf::uint8* CubicBSpline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.CubicBSpline)
  // repeated double center = 1;
  for (int i = 0; i < this->center_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->center(i), target);
  }

  // repeated double support = 2;
  for (int i = 0; i < this->support_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->support(i), target);
  }

  // optional double weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.CubicBSpline)
  return target;
}

size_t CubicBSpline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.CubicBSpline)
  size_t total_size = 0;

  // optional double weight = 3;
  if (has_weight()) {
    total_size += 1 + 8;
  }

  // repeated double center = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->center_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->center_size());
    total_size += data_size;
  }

  // repeated double support = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->support_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->support_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CubicBSpline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.CubicBSpline)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CubicBSpline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CubicBSpline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.CubicBSpline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.CubicBSpline)
    UnsafeMergeFrom(*source);
  }
}

void CubicBSpline::MergeFrom(const CubicBSpline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.CubicBSpline)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CubicBSpline::UnsafeMergeFrom(const CubicBSpline& from) {
  GOOGLE_DCHECK(&from != this);
  center_.UnsafeMergeFrom(from.center_);
  support_.UnsafeMergeFrom(from.support_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CubicBSpline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.CubicBSpline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CubicBSpline::CopyFrom(const CubicBSpline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.CubicBSpline)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CubicBSpline::IsInitialized() const {

  return true;
}

void CubicBSpline::Swap(CubicBSpline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CubicBSpline::InternalSwap(CubicBSpline* other) {
  center_.UnsafeArenaSwap(&other->center_);
  support_.UnsafeArenaSwap(&other->support_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CubicBSpline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CubicBSpline_descriptor_;
  metadata.reflection = CubicBSpline_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CubicBSpline

// repeated double center = 1;
int CubicBSpline::center_size() const {
  return center_.size();
}
void CubicBSpline::clear_center() {
  center_.Clear();
}
double CubicBSpline::center(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.CubicBSpline.center)
  return center_.Get(index);
}
void CubicBSpline::set_center(int index, double value) {
  center_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.CubicBSpline.center)
}
void CubicBSpline::add_center(double value) {
  center_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.CubicBSpline.center)
}
const ::google::protobuf::RepeatedField< double >&
CubicBSpline::center() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.CubicBSpline.center)
  return center_;
}
::google::protobuf::RepeatedField< double >*
CubicBSpline::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.CubicBSpline.center)
  return &center_;
}

// repeated double support = 2;
int CubicBSpline::support_size() const {
  return support_.size();
}
void CubicBSpline::clear_support() {
  support_.Clear();
}
double CubicBSpline::support(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.CubicBSpline.support)
  return support_.Get(index);
}
void CubicBSpline::set_support(int index, double value) {
  support_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.CubicBSpline.support)
}
void CubicBSpline::add_support(double value) {
  support_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.CubicBSpline.support)
}
const ::google::protobuf::RepeatedField< double >&
CubicBSpline::support() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.CubicBSpline.support)
  return support_;
}
::google::protobuf::RepeatedField< double >*
CubicBSpline::mutable_support() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.CubicBSpline.support)
  return &support_;
}

// optional double weight = 3;
bool CubicBSpline::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CubicBSpline::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void CubicBSpline::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void CubicBSpline::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
double CubicBSpline::weight() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.CubicBSpline.weight)
  return weight_;
}
void CubicBSpline::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.CubicBSpline.weight)
}

inline const CubicBSpline* CubicBSpline::internal_default_instance() {
  return &CubicBSpline_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdaptiveGridCell::kRangesFieldNumber;
const int AdaptiveGridCell::kLeafFieldNumber;
const int AdaptiveGridCell::kInterNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdaptiveGridCell::AdaptiveGridCell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.AdaptiveGridCell)
}

void AdaptiveGridCell::InitAsDefaultInstance() {
  leaf_ = const_cast< ::OptCAD::proto::AdaptiveGridLeaf*>(
      ::OptCAD::proto::AdaptiveGridLeaf::internal_default_instance());
  internode_ = const_cast< ::OptCAD::proto::AdaptiveGridInterNode*>(
      ::OptCAD::proto::AdaptiveGridInterNode::internal_default_instance());
}

AdaptiveGridCell::AdaptiveGridCell(const AdaptiveGridCell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.AdaptiveGridCell)
}

void AdaptiveGridCell::SharedCtor() {
  _cached_size_ = 0;
  leaf_ = NULL;
  internode_ = NULL;
}

AdaptiveGridCell::~AdaptiveGridCell() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.AdaptiveGridCell)
  SharedDtor();
}

void AdaptiveGridCell::SharedDtor() {
  if (this != &AdaptiveGridCell_default_instance_.get()) {
    delete leaf_;
    delete internode_;
  }
}

void AdaptiveGridCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdaptiveGridCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdaptiveGridCell_descriptor_;
}

const AdaptiveGridCell& AdaptiveGridCell::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdaptiveGridCell> AdaptiveGridCell_default_instance_;

AdaptiveGridCell* AdaptiveGridCell::New(::google::protobuf::Arena* arena) const {
  AdaptiveGridCell* n = new AdaptiveGridCell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdaptiveGridCell::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.AdaptiveGridCell)
  if (_has_bits_[0 / 32] & 6u) {
    if (has_leaf()) {
      if (leaf_ != NULL) leaf_->::OptCAD::proto::AdaptiveGridLeaf::Clear();
    }
    if (has_internode()) {
      if (internode_ != NULL) internode_->::OptCAD::proto::AdaptiveGridInterNode::Clear();
    }
  }
  ranges_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdaptiveGridCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.AdaptiveGridCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double ranges = 1;
      case 1: {
        if (tag == 9) {
         parse_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_ranges())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ranges())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_ranges;
        if (input->ExpectTag(18)) goto parse_leaf;
        break;
      }

      // optional .OptCAD.proto.AdaptiveGridLeaf leaf = 2;
      case 2: {
        if (tag == 18) {
         parse_leaf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_interNode;
        break;
      }

      // optional .OptCAD.proto.AdaptiveGridInterNode interNode = 3;
      case 3: {
        if (tag == 26) {
         parse_interNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.AdaptiveGridCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.AdaptiveGridCell)
  return false;
#undef DO_
}

void AdaptiveGridCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.AdaptiveGridCell)
  // repeated double ranges = 1;
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->ranges(i), output);
  }

  // optional .OptCAD.proto.AdaptiveGridLeaf leaf = 2;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leaf_, output);
  }

  // optional .OptCAD.proto.AdaptiveGridInterNode interNode = 3;
  if (has_internode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->internode_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.AdaptiveGridCell)
}

::google::protobuf::uint8* AdaptiveGridCell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.AdaptiveGridCell)
  // repeated double ranges = 1;
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->ranges(i), target);
  }

  // optional .OptCAD.proto.AdaptiveGridLeaf leaf = 2;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->leaf_, false, target);
  }

  // optional .OptCAD.proto.AdaptiveGridInterNode interNode = 3;
  if (has_internode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->internode_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.AdaptiveGridCell)
  return target;
}

size_t AdaptiveGridCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.AdaptiveGridCell)
  size_t total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional .OptCAD.proto.AdaptiveGridLeaf leaf = 2;
    if (has_leaf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leaf_);
    }

    // optional .OptCAD.proto.AdaptiveGridInterNode interNode = 3;
    if (has_internode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->internode_);
    }

  }
  // repeated double ranges = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->ranges_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ranges_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaptiveGridCell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.AdaptiveGridCell)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdaptiveGridCell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdaptiveGridCell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.AdaptiveGridCell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.AdaptiveGridCell)
    UnsafeMergeFrom(*source);
  }
}

void AdaptiveGridCell::MergeFrom(const AdaptiveGridCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.AdaptiveGridCell)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdaptiveGridCell::UnsafeMergeFrom(const AdaptiveGridCell& from) {
  GOOGLE_DCHECK(&from != this);
  ranges_.UnsafeMergeFrom(from.ranges_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_leaf()) {
      mutable_leaf()->::OptCAD::proto::AdaptiveGridLeaf::MergeFrom(from.leaf());
    }
    if (from.has_internode()) {
      mutable_internode()->::OptCAD::proto::AdaptiveGridInterNode::MergeFrom(from.internode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AdaptiveGridCell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.AdaptiveGridCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaptiveGridCell::CopyFrom(const AdaptiveGridCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.AdaptiveGridCell)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdaptiveGridCell::IsInitialized() const {

  return true;
}

void AdaptiveGridCell::Swap(AdaptiveGridCell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdaptiveGridCell::InternalSwap(AdaptiveGridCell* other) {
  ranges_.UnsafeArenaSwap(&other->ranges_);
  std::swap(leaf_, other->leaf_);
  std::swap(internode_, other->internode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdaptiveGridCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdaptiveGridCell_descriptor_;
  metadata.reflection = AdaptiveGridCell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdaptiveGridCell

// repeated double ranges = 1;
int AdaptiveGridCell::ranges_size() const {
  return ranges_.size();
}
void AdaptiveGridCell::clear_ranges() {
  ranges_.Clear();
}
double AdaptiveGridCell::ranges(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridCell.ranges)
  return ranges_.Get(index);
}
void AdaptiveGridCell::set_ranges(int index, double value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:OptCAD.proto.AdaptiveGridCell.ranges)
}
void AdaptiveGridCell::add_ranges(double value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:OptCAD.proto.AdaptiveGridCell.ranges)
}
const ::google::protobuf::RepeatedField< double >&
AdaptiveGridCell::ranges() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.AdaptiveGridCell.ranges)
  return ranges_;
}
::google::protobuf::RepeatedField< double >*
AdaptiveGridCell::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.AdaptiveGridCell.ranges)
  return &ranges_;
}

// optional .OptCAD.proto.AdaptiveGridLeaf leaf = 2;
bool AdaptiveGridCell::has_leaf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdaptiveGridCell::set_has_leaf() {
  _has_bits_[0] |= 0x00000002u;
}
void AdaptiveGridCell::clear_has_leaf() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdaptiveGridCell::clear_leaf() {
  if (leaf_ != NULL) leaf_->::OptCAD::proto::AdaptiveGridLeaf::Clear();
  clear_has_leaf();
}
const ::OptCAD::proto::AdaptiveGridLeaf& AdaptiveGridCell::leaf() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridCell.leaf)
  return leaf_ != NULL ? *leaf_
                         : *::OptCAD::proto::AdaptiveGridLeaf::internal_default_instance();
}
::OptCAD::proto::AdaptiveGridLeaf* AdaptiveGridCell::mutable_leaf() {
  set_has_leaf();
  if (leaf_ == NULL) {
    leaf_ = new ::OptCAD::proto::AdaptiveGridLeaf;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.AdaptiveGridCell.leaf)
  return leaf_;
}
::OptCAD::proto::AdaptiveGridLeaf* AdaptiveGridCell::release_leaf() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.AdaptiveGridCell.leaf)
  clear_has_leaf();
  ::OptCAD::proto::AdaptiveGridLeaf* temp = leaf_;
  leaf_ = NULL;
  return temp;
}
void AdaptiveGridCell::set_allocated_leaf(::OptCAD::proto::AdaptiveGridLeaf* leaf) {
  delete leaf_;
  leaf_ = leaf;
  if (leaf) {
    set_has_leaf();
  } else {
    clear_has_leaf();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.AdaptiveGridCell.leaf)
}

// optional .OptCAD.proto.AdaptiveGridInterNode interNode = 3;
bool AdaptiveGridCell::has_internode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AdaptiveGridCell::set_has_internode() {
  _has_bits_[0] |= 0x00000004u;
}
void AdaptiveGridCell::clear_has_internode() {
  _has_bits_[0] &= ~0x00000004u;
}
void AdaptiveGridCell::clear_internode() {
  if (internode_ != NULL) internode_->::OptCAD::proto::AdaptiveGridInterNode::Clear();
  clear_has_internode();
}
const ::OptCAD::proto::AdaptiveGridInterNode& AdaptiveGridCell::internode() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridCell.interNode)
  return internode_ != NULL ? *internode_
                         : *::OptCAD::proto::AdaptiveGridInterNode::internal_default_instance();
}
::OptCAD::proto::AdaptiveGridInterNode* AdaptiveGridCell::mutable_internode() {
  set_has_internode();
  if (internode_ == NULL) {
    internode_ = new ::OptCAD::proto::AdaptiveGridInterNode;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.AdaptiveGridCell.interNode)
  return internode_;
}
::OptCAD::proto::AdaptiveGridInterNode* AdaptiveGridCell::release_internode() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.AdaptiveGridCell.interNode)
  clear_has_internode();
  ::OptCAD::proto::AdaptiveGridInterNode* temp = internode_;
  internode_ = NULL;
  return temp;
}
void AdaptiveGridCell::set_allocated_internode(::OptCAD::proto::AdaptiveGridInterNode* internode) {
  delete internode_;
  internode_ = internode;
  if (internode) {
    set_has_internode();
  } else {
    clear_has_internode();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.AdaptiveGridCell.interNode)
}

inline const AdaptiveGridCell* AdaptiveGridCell::internal_default_instance() {
  return &AdaptiveGridCell_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdaptiveGridLeaf::kCenterShapeInfoFieldNumber;
const int AdaptiveGridLeaf::kHomeomorphicSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdaptiveGridLeaf::AdaptiveGridLeaf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.AdaptiveGridLeaf)
}

void AdaptiveGridLeaf::InitAsDefaultInstance() {
  centershapeinfo_ = const_cast< ::OptCAD::proto::ShapeInfo*>(
      ::OptCAD::proto::ShapeInfo::internal_default_instance());
}

AdaptiveGridLeaf::AdaptiveGridLeaf(const AdaptiveGridLeaf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.AdaptiveGridLeaf)
}

void AdaptiveGridLeaf::SharedCtor() {
  _cached_size_ = 0;
  centershapeinfo_ = NULL;
}

AdaptiveGridLeaf::~AdaptiveGridLeaf() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.AdaptiveGridLeaf)
  SharedDtor();
}

void AdaptiveGridLeaf::SharedDtor() {
  if (this != &AdaptiveGridLeaf_default_instance_.get()) {
    delete centershapeinfo_;
  }
}

void AdaptiveGridLeaf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdaptiveGridLeaf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdaptiveGridLeaf_descriptor_;
}

const AdaptiveGridLeaf& AdaptiveGridLeaf::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdaptiveGridLeaf> AdaptiveGridLeaf_default_instance_;

AdaptiveGridLeaf* AdaptiveGridLeaf::New(::google::protobuf::Arena* arena) const {
  AdaptiveGridLeaf* n = new AdaptiveGridLeaf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdaptiveGridLeaf::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.AdaptiveGridLeaf)
  if (has_centershapeinfo()) {
    if (centershapeinfo_ != NULL) centershapeinfo_->::OptCAD::proto::ShapeInfo::Clear();
  }
  homeomorphicsamples_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdaptiveGridLeaf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.AdaptiveGridLeaf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OptCAD.proto.ShapeInfo centerShapeInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centershapeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_homeomorphicSamples;
        break;
      }

      // repeated .OptCAD.proto.HomeomorphicSample homeomorphicSamples = 2;
      case 2: {
        if (tag == 18) {
         parse_homeomorphicSamples:
          DO_(input->IncrementRecursionDepth());
         parse_loop_homeomorphicSamples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_homeomorphicsamples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_homeomorphicSamples;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.AdaptiveGridLeaf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.AdaptiveGridLeaf)
  return false;
#undef DO_
}

void AdaptiveGridLeaf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.AdaptiveGridLeaf)
  // optional .OptCAD.proto.ShapeInfo centerShapeInfo = 1;
  if (has_centershapeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->centershapeinfo_, output);
  }

  // repeated .OptCAD.proto.HomeomorphicSample homeomorphicSamples = 2;
  for (unsigned int i = 0, n = this->homeomorphicsamples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->homeomorphicsamples(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.AdaptiveGridLeaf)
}

::google::protobuf::uint8* AdaptiveGridLeaf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.AdaptiveGridLeaf)
  // optional .OptCAD.proto.ShapeInfo centerShapeInfo = 1;
  if (has_centershapeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->centershapeinfo_, false, target);
  }

  // repeated .OptCAD.proto.HomeomorphicSample homeomorphicSamples = 2;
  for (unsigned int i = 0, n = this->homeomorphicsamples_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->homeomorphicsamples(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.AdaptiveGridLeaf)
  return target;
}

size_t AdaptiveGridLeaf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.AdaptiveGridLeaf)
  size_t total_size = 0;

  // optional .OptCAD.proto.ShapeInfo centerShapeInfo = 1;
  if (has_centershapeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->centershapeinfo_);
  }

  // repeated .OptCAD.proto.HomeomorphicSample homeomorphicSamples = 2;
  {
    unsigned int count = this->homeomorphicsamples_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->homeomorphicsamples(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaptiveGridLeaf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.AdaptiveGridLeaf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdaptiveGridLeaf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdaptiveGridLeaf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.AdaptiveGridLeaf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.AdaptiveGridLeaf)
    UnsafeMergeFrom(*source);
  }
}

void AdaptiveGridLeaf::MergeFrom(const AdaptiveGridLeaf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.AdaptiveGridLeaf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdaptiveGridLeaf::UnsafeMergeFrom(const AdaptiveGridLeaf& from) {
  GOOGLE_DCHECK(&from != this);
  homeomorphicsamples_.MergeFrom(from.homeomorphicsamples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_centershapeinfo()) {
      mutable_centershapeinfo()->::OptCAD::proto::ShapeInfo::MergeFrom(from.centershapeinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AdaptiveGridLeaf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.AdaptiveGridLeaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaptiveGridLeaf::CopyFrom(const AdaptiveGridLeaf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.AdaptiveGridLeaf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdaptiveGridLeaf::IsInitialized() const {

  return true;
}

void AdaptiveGridLeaf::Swap(AdaptiveGridLeaf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdaptiveGridLeaf::InternalSwap(AdaptiveGridLeaf* other) {
  std::swap(centershapeinfo_, other->centershapeinfo_);
  homeomorphicsamples_.UnsafeArenaSwap(&other->homeomorphicsamples_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdaptiveGridLeaf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdaptiveGridLeaf_descriptor_;
  metadata.reflection = AdaptiveGridLeaf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdaptiveGridLeaf

// optional .OptCAD.proto.ShapeInfo centerShapeInfo = 1;
bool AdaptiveGridLeaf::has_centershapeinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdaptiveGridLeaf::set_has_centershapeinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void AdaptiveGridLeaf::clear_has_centershapeinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdaptiveGridLeaf::clear_centershapeinfo() {
  if (centershapeinfo_ != NULL) centershapeinfo_->::OptCAD::proto::ShapeInfo::Clear();
  clear_has_centershapeinfo();
}
const ::OptCAD::proto::ShapeInfo& AdaptiveGridLeaf::centershapeinfo() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridLeaf.centerShapeInfo)
  return centershapeinfo_ != NULL ? *centershapeinfo_
                         : *::OptCAD::proto::ShapeInfo::internal_default_instance();
}
::OptCAD::proto::ShapeInfo* AdaptiveGridLeaf::mutable_centershapeinfo() {
  set_has_centershapeinfo();
  if (centershapeinfo_ == NULL) {
    centershapeinfo_ = new ::OptCAD::proto::ShapeInfo;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.AdaptiveGridLeaf.centerShapeInfo)
  return centershapeinfo_;
}
::OptCAD::proto::ShapeInfo* AdaptiveGridLeaf::release_centershapeinfo() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.AdaptiveGridLeaf.centerShapeInfo)
  clear_has_centershapeinfo();
  ::OptCAD::proto::ShapeInfo* temp = centershapeinfo_;
  centershapeinfo_ = NULL;
  return temp;
}
void AdaptiveGridLeaf::set_allocated_centershapeinfo(::OptCAD::proto::ShapeInfo* centershapeinfo) {
  delete centershapeinfo_;
  centershapeinfo_ = centershapeinfo;
  if (centershapeinfo) {
    set_has_centershapeinfo();
  } else {
    clear_has_centershapeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.AdaptiveGridLeaf.centerShapeInfo)
}

// repeated .OptCAD.proto.HomeomorphicSample homeomorphicSamples = 2;
int AdaptiveGridLeaf::homeomorphicsamples_size() const {
  return homeomorphicsamples_.size();
}
void AdaptiveGridLeaf::clear_homeomorphicsamples() {
  homeomorphicsamples_.Clear();
}
const ::OptCAD::proto::HomeomorphicSample& AdaptiveGridLeaf::homeomorphicsamples(int index) const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridLeaf.homeomorphicSamples)
  return homeomorphicsamples_.Get(index);
}
::OptCAD::proto::HomeomorphicSample* AdaptiveGridLeaf::mutable_homeomorphicsamples(int index) {
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.AdaptiveGridLeaf.homeomorphicSamples)
  return homeomorphicsamples_.Mutable(index);
}
::OptCAD::proto::HomeomorphicSample* AdaptiveGridLeaf::add_homeomorphicsamples() {
  // @@protoc_insertion_point(field_add:OptCAD.proto.AdaptiveGridLeaf.homeomorphicSamples)
  return homeomorphicsamples_.Add();
}
::google::protobuf::RepeatedPtrField< ::OptCAD::proto::HomeomorphicSample >*
AdaptiveGridLeaf::mutable_homeomorphicsamples() {
  // @@protoc_insertion_point(field_mutable_list:OptCAD.proto.AdaptiveGridLeaf.homeomorphicSamples)
  return &homeomorphicsamples_;
}
const ::google::protobuf::RepeatedPtrField< ::OptCAD::proto::HomeomorphicSample >&
AdaptiveGridLeaf::homeomorphicsamples() const {
  // @@protoc_insertion_point(field_list:OptCAD.proto.AdaptiveGridLeaf.homeomorphicSamples)
  return homeomorphicsamples_;
}

inline const AdaptiveGridLeaf* AdaptiveGridLeaf::internal_default_instance() {
  return &AdaptiveGridLeaf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeomorphicSample::kPrecomputedSampleIDFieldNumber;
const int HomeomorphicSample::kShapeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeomorphicSample::HomeomorphicSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.HomeomorphicSample)
}

void HomeomorphicSample::InitAsDefaultInstance() {
  shapeinfo_ = const_cast< ::OptCAD::proto::ShapeInfo*>(
      ::OptCAD::proto::ShapeInfo::internal_default_instance());
}

HomeomorphicSample::HomeomorphicSample(const HomeomorphicSample& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.HomeomorphicSample)
}

void HomeomorphicSample::SharedCtor() {
  _cached_size_ = 0;
  shapeinfo_ = NULL;
  precomputedsampleid_ = 0;
}

HomeomorphicSample::~HomeomorphicSample() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.HomeomorphicSample)
  SharedDtor();
}

void HomeomorphicSample::SharedDtor() {
  if (this != &HomeomorphicSample_default_instance_.get()) {
    delete shapeinfo_;
  }
}

void HomeomorphicSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeomorphicSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HomeomorphicSample_descriptor_;
}

const HomeomorphicSample& HomeomorphicSample::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HomeomorphicSample> HomeomorphicSample_default_instance_;

HomeomorphicSample* HomeomorphicSample::New(::google::protobuf::Arena* arena) const {
  HomeomorphicSample* n = new HomeomorphicSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeomorphicSample::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.HomeomorphicSample)
  if (_has_bits_[0 / 32] & 3u) {
    precomputedsampleid_ = 0;
    if (has_shapeinfo()) {
      if (shapeinfo_ != NULL) shapeinfo_->::OptCAD::proto::ShapeInfo::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HomeomorphicSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.HomeomorphicSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 precomputedSampleID = 1;
      case 1: {
        if (tag == 8) {
          set_has_precomputedsampleid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precomputedsampleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shapeInfo;
        break;
      }

      // optional .OptCAD.proto.ShapeInfo shapeInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_shapeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.HomeomorphicSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.HomeomorphicSample)
  return false;
#undef DO_
}

void HomeomorphicSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.HomeomorphicSample)
  // optional int32 precomputedSampleID = 1;
  if (has_precomputedsampleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->precomputedsampleid(), output);
  }

  // optional .OptCAD.proto.ShapeInfo shapeInfo = 2;
  if (has_shapeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shapeinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.HomeomorphicSample)
}

::google::protobuf::uint8* HomeomorphicSample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.HomeomorphicSample)
  // optional int32 precomputedSampleID = 1;
  if (has_precomputedsampleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->precomputedsampleid(), target);
  }

  // optional .OptCAD.proto.ShapeInfo shapeInfo = 2;
  if (has_shapeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shapeinfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.HomeomorphicSample)
  return target;
}

size_t HomeomorphicSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.HomeomorphicSample)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 precomputedSampleID = 1;
    if (has_precomputedsampleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precomputedsampleid());
    }

    // optional .OptCAD.proto.ShapeInfo shapeInfo = 2;
    if (has_shapeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shapeinfo_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeomorphicSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.HomeomorphicSample)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HomeomorphicSample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeomorphicSample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.HomeomorphicSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.HomeomorphicSample)
    UnsafeMergeFrom(*source);
  }
}

void HomeomorphicSample::MergeFrom(const HomeomorphicSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.HomeomorphicSample)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HomeomorphicSample::UnsafeMergeFrom(const HomeomorphicSample& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_precomputedsampleid()) {
      set_precomputedsampleid(from.precomputedsampleid());
    }
    if (from.has_shapeinfo()) {
      mutable_shapeinfo()->::OptCAD::proto::ShapeInfo::MergeFrom(from.shapeinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HomeomorphicSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.HomeomorphicSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeomorphicSample::CopyFrom(const HomeomorphicSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.HomeomorphicSample)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HomeomorphicSample::IsInitialized() const {

  return true;
}

void HomeomorphicSample::Swap(HomeomorphicSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeomorphicSample::InternalSwap(HomeomorphicSample* other) {
  std::swap(precomputedsampleid_, other->precomputedsampleid_);
  std::swap(shapeinfo_, other->shapeinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeomorphicSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HomeomorphicSample_descriptor_;
  metadata.reflection = HomeomorphicSample_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeomorphicSample

// optional int32 precomputedSampleID = 1;
bool HomeomorphicSample::has_precomputedsampleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HomeomorphicSample::set_has_precomputedsampleid() {
  _has_bits_[0] |= 0x00000001u;
}
void HomeomorphicSample::clear_has_precomputedsampleid() {
  _has_bits_[0] &= ~0x00000001u;
}
void HomeomorphicSample::clear_precomputedsampleid() {
  precomputedsampleid_ = 0;
  clear_has_precomputedsampleid();
}
::google::protobuf::int32 HomeomorphicSample::precomputedsampleid() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.HomeomorphicSample.precomputedSampleID)
  return precomputedsampleid_;
}
void HomeomorphicSample::set_precomputedsampleid(::google::protobuf::int32 value) {
  set_has_precomputedsampleid();
  precomputedsampleid_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.HomeomorphicSample.precomputedSampleID)
}

// optional .OptCAD.proto.ShapeInfo shapeInfo = 2;
bool HomeomorphicSample::has_shapeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HomeomorphicSample::set_has_shapeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void HomeomorphicSample::clear_has_shapeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void HomeomorphicSample::clear_shapeinfo() {
  if (shapeinfo_ != NULL) shapeinfo_->::OptCAD::proto::ShapeInfo::Clear();
  clear_has_shapeinfo();
}
const ::OptCAD::proto::ShapeInfo& HomeomorphicSample::shapeinfo() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.HomeomorphicSample.shapeInfo)
  return shapeinfo_ != NULL ? *shapeinfo_
                         : *::OptCAD::proto::ShapeInfo::internal_default_instance();
}
::OptCAD::proto::ShapeInfo* HomeomorphicSample::mutable_shapeinfo() {
  set_has_shapeinfo();
  if (shapeinfo_ == NULL) {
    shapeinfo_ = new ::OptCAD::proto::ShapeInfo;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.HomeomorphicSample.shapeInfo)
  return shapeinfo_;
}
::OptCAD::proto::ShapeInfo* HomeomorphicSample::release_shapeinfo() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.HomeomorphicSample.shapeInfo)
  clear_has_shapeinfo();
  ::OptCAD::proto::ShapeInfo* temp = shapeinfo_;
  shapeinfo_ = NULL;
  return temp;
}
void HomeomorphicSample::set_allocated_shapeinfo(::OptCAD::proto::ShapeInfo* shapeinfo) {
  delete shapeinfo_;
  shapeinfo_ = shapeinfo;
  if (shapeinfo) {
    set_has_shapeinfo();
  } else {
    clear_has_shapeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.HomeomorphicSample.shapeInfo)
}

inline const HomeomorphicSample* HomeomorphicSample::internal_default_instance() {
  return &HomeomorphicSample_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdaptiveGridInterNode::kChild1FieldNumber;
const int AdaptiveGridInterNode::kChild2FieldNumber;
const int AdaptiveGridInterNode::kSplidDirectionFieldNumber;
const int AdaptiveGridInterNode::kSplitValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdaptiveGridInterNode::AdaptiveGridInterNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptCAD.proto.AdaptiveGridInterNode)
}

void AdaptiveGridInterNode::InitAsDefaultInstance() {
  child1_ = const_cast< ::OptCAD::proto::AdaptiveGridCell*>(
      ::OptCAD::proto::AdaptiveGridCell::internal_default_instance());
  child2_ = const_cast< ::OptCAD::proto::AdaptiveGridCell*>(
      ::OptCAD::proto::AdaptiveGridCell::internal_default_instance());
}

AdaptiveGridInterNode::AdaptiveGridInterNode(const AdaptiveGridInterNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OptCAD.proto.AdaptiveGridInterNode)
}

void AdaptiveGridInterNode::SharedCtor() {
  _cached_size_ = 0;
  child1_ = NULL;
  child2_ = NULL;
  ::memset(&splitval_, 0, reinterpret_cast<char*>(&spliddirection_) -
    reinterpret_cast<char*>(&splitval_) + sizeof(spliddirection_));
}

AdaptiveGridInterNode::~AdaptiveGridInterNode() {
  // @@protoc_insertion_point(destructor:OptCAD.proto.AdaptiveGridInterNode)
  SharedDtor();
}

void AdaptiveGridInterNode::SharedDtor() {
  if (this != &AdaptiveGridInterNode_default_instance_.get()) {
    delete child1_;
    delete child2_;
  }
}

void AdaptiveGridInterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdaptiveGridInterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdaptiveGridInterNode_descriptor_;
}

const AdaptiveGridInterNode& AdaptiveGridInterNode::default_instance() {
  protobuf_InitDefaults_PrecomputedParametricShape_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdaptiveGridInterNode> AdaptiveGridInterNode_default_instance_;

AdaptiveGridInterNode* AdaptiveGridInterNode::New(::google::protobuf::Arena* arena) const {
  AdaptiveGridInterNode* n = new AdaptiveGridInterNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdaptiveGridInterNode::Clear() {
// @@protoc_insertion_point(message_clear_start:OptCAD.proto.AdaptiveGridInterNode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdaptiveGridInterNode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdaptiveGridInterNode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(splitval_, spliddirection_);
    if (has_child1()) {
      if (child1_ != NULL) child1_->::OptCAD::proto::AdaptiveGridCell::Clear();
    }
    if (has_child2()) {
      if (child2_ != NULL) child2_->::OptCAD::proto::AdaptiveGridCell::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdaptiveGridInterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptCAD.proto.AdaptiveGridInterNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OptCAD.proto.AdaptiveGridCell child1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_child1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_child2;
        break;
      }

      // optional .OptCAD.proto.AdaptiveGridCell child2 = 2;
      case 2: {
        if (tag == 18) {
         parse_child2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_child2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_splidDirection;
        break;
      }

      // optional int32 splidDirection = 3;
      case 3: {
        if (tag == 24) {
         parse_splidDirection:
          set_has_spliddirection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spliddirection_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_splitVal;
        break;
      }

      // optional double splitVal = 4;
      case 4: {
        if (tag == 33) {
         parse_splitVal:
          set_has_splitval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &splitval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptCAD.proto.AdaptiveGridInterNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptCAD.proto.AdaptiveGridInterNode)
  return false;
#undef DO_
}

void AdaptiveGridInterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptCAD.proto.AdaptiveGridInterNode)
  // optional .OptCAD.proto.AdaptiveGridCell child1 = 1;
  if (has_child1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->child1_, output);
  }

  // optional .OptCAD.proto.AdaptiveGridCell child2 = 2;
  if (has_child2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->child2_, output);
  }

  // optional int32 splidDirection = 3;
  if (has_spliddirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spliddirection(), output);
  }

  // optional double splitVal = 4;
  if (has_splitval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->splitval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OptCAD.proto.AdaptiveGridInterNode)
}

::google::protobuf::uint8* AdaptiveGridInterNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptCAD.proto.AdaptiveGridInterNode)
  // optional .OptCAD.proto.AdaptiveGridCell child1 = 1;
  if (has_child1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->child1_, false, target);
  }

  // optional .OptCAD.proto.AdaptiveGridCell child2 = 2;
  if (has_child2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->child2_, false, target);
  }

  // optional int32 splidDirection = 3;
  if (has_spliddirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->spliddirection(), target);
  }

  // optional double splitVal = 4;
  if (has_splitval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->splitval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptCAD.proto.AdaptiveGridInterNode)
  return target;
}

size_t AdaptiveGridInterNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptCAD.proto.AdaptiveGridInterNode)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .OptCAD.proto.AdaptiveGridCell child1 = 1;
    if (has_child1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->child1_);
    }

    // optional .OptCAD.proto.AdaptiveGridCell child2 = 2;
    if (has_child2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->child2_);
    }

    // optional int32 splidDirection = 3;
    if (has_spliddirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spliddirection());
    }

    // optional double splitVal = 4;
    if (has_splitval()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaptiveGridInterNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptCAD.proto.AdaptiveGridInterNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdaptiveGridInterNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdaptiveGridInterNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptCAD.proto.AdaptiveGridInterNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptCAD.proto.AdaptiveGridInterNode)
    UnsafeMergeFrom(*source);
  }
}

void AdaptiveGridInterNode::MergeFrom(const AdaptiveGridInterNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptCAD.proto.AdaptiveGridInterNode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdaptiveGridInterNode::UnsafeMergeFrom(const AdaptiveGridInterNode& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_child1()) {
      mutable_child1()->::OptCAD::proto::AdaptiveGridCell::MergeFrom(from.child1());
    }
    if (from.has_child2()) {
      mutable_child2()->::OptCAD::proto::AdaptiveGridCell::MergeFrom(from.child2());
    }
    if (from.has_spliddirection()) {
      set_spliddirection(from.spliddirection());
    }
    if (from.has_splitval()) {
      set_splitval(from.splitval());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AdaptiveGridInterNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptCAD.proto.AdaptiveGridInterNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaptiveGridInterNode::CopyFrom(const AdaptiveGridInterNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptCAD.proto.AdaptiveGridInterNode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdaptiveGridInterNode::IsInitialized() const {

  return true;
}

void AdaptiveGridInterNode::Swap(AdaptiveGridInterNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdaptiveGridInterNode::InternalSwap(AdaptiveGridInterNode* other) {
  std::swap(child1_, other->child1_);
  std::swap(child2_, other->child2_);
  std::swap(spliddirection_, other->spliddirection_);
  std::swap(splitval_, other->splitval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdaptiveGridInterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdaptiveGridInterNode_descriptor_;
  metadata.reflection = AdaptiveGridInterNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdaptiveGridInterNode

// optional .OptCAD.proto.AdaptiveGridCell child1 = 1;
bool AdaptiveGridInterNode::has_child1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdaptiveGridInterNode::set_has_child1() {
  _has_bits_[0] |= 0x00000001u;
}
void AdaptiveGridInterNode::clear_has_child1() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdaptiveGridInterNode::clear_child1() {
  if (child1_ != NULL) child1_->::OptCAD::proto::AdaptiveGridCell::Clear();
  clear_has_child1();
}
const ::OptCAD::proto::AdaptiveGridCell& AdaptiveGridInterNode::child1() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridInterNode.child1)
  return child1_ != NULL ? *child1_
                         : *::OptCAD::proto::AdaptiveGridCell::internal_default_instance();
}
::OptCAD::proto::AdaptiveGridCell* AdaptiveGridInterNode::mutable_child1() {
  set_has_child1();
  if (child1_ == NULL) {
    child1_ = new ::OptCAD::proto::AdaptiveGridCell;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.AdaptiveGridInterNode.child1)
  return child1_;
}
::OptCAD::proto::AdaptiveGridCell* AdaptiveGridInterNode::release_child1() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.AdaptiveGridInterNode.child1)
  clear_has_child1();
  ::OptCAD::proto::AdaptiveGridCell* temp = child1_;
  child1_ = NULL;
  return temp;
}
void AdaptiveGridInterNode::set_allocated_child1(::OptCAD::proto::AdaptiveGridCell* child1) {
  delete child1_;
  child1_ = child1;
  if (child1) {
    set_has_child1();
  } else {
    clear_has_child1();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.AdaptiveGridInterNode.child1)
}

// optional .OptCAD.proto.AdaptiveGridCell child2 = 2;
bool AdaptiveGridInterNode::has_child2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdaptiveGridInterNode::set_has_child2() {
  _has_bits_[0] |= 0x00000002u;
}
void AdaptiveGridInterNode::clear_has_child2() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdaptiveGridInterNode::clear_child2() {
  if (child2_ != NULL) child2_->::OptCAD::proto::AdaptiveGridCell::Clear();
  clear_has_child2();
}
const ::OptCAD::proto::AdaptiveGridCell& AdaptiveGridInterNode::child2() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridInterNode.child2)
  return child2_ != NULL ? *child2_
                         : *::OptCAD::proto::AdaptiveGridCell::internal_default_instance();
}
::OptCAD::proto::AdaptiveGridCell* AdaptiveGridInterNode::mutable_child2() {
  set_has_child2();
  if (child2_ == NULL) {
    child2_ = new ::OptCAD::proto::AdaptiveGridCell;
  }
  // @@protoc_insertion_point(field_mutable:OptCAD.proto.AdaptiveGridInterNode.child2)
  return child2_;
}
::OptCAD::proto::AdaptiveGridCell* AdaptiveGridInterNode::release_child2() {
  // @@protoc_insertion_point(field_release:OptCAD.proto.AdaptiveGridInterNode.child2)
  clear_has_child2();
  ::OptCAD::proto::AdaptiveGridCell* temp = child2_;
  child2_ = NULL;
  return temp;
}
void AdaptiveGridInterNode::set_allocated_child2(::OptCAD::proto::AdaptiveGridCell* child2) {
  delete child2_;
  child2_ = child2;
  if (child2) {
    set_has_child2();
  } else {
    clear_has_child2();
  }
  // @@protoc_insertion_point(field_set_allocated:OptCAD.proto.AdaptiveGridInterNode.child2)
}

// optional int32 splidDirection = 3;
bool AdaptiveGridInterNode::has_spliddirection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AdaptiveGridInterNode::set_has_spliddirection() {
  _has_bits_[0] |= 0x00000004u;
}
void AdaptiveGridInterNode::clear_has_spliddirection() {
  _has_bits_[0] &= ~0x00000004u;
}
void AdaptiveGridInterNode::clear_spliddirection() {
  spliddirection_ = 0;
  clear_has_spliddirection();
}
::google::protobuf::int32 AdaptiveGridInterNode::spliddirection() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridInterNode.splidDirection)
  return spliddirection_;
}
void AdaptiveGridInterNode::set_spliddirection(::google::protobuf::int32 value) {
  set_has_spliddirection();
  spliddirection_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.AdaptiveGridInterNode.splidDirection)
}

// optional double splitVal = 4;
bool AdaptiveGridInterNode::has_splitval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AdaptiveGridInterNode::set_has_splitval() {
  _has_bits_[0] |= 0x00000008u;
}
void AdaptiveGridInterNode::clear_has_splitval() {
  _has_bits_[0] &= ~0x00000008u;
}
void AdaptiveGridInterNode::clear_splitval() {
  splitval_ = 0;
  clear_has_splitval();
}
double AdaptiveGridInterNode::splitval() const {
  // @@protoc_insertion_point(field_get:OptCAD.proto.AdaptiveGridInterNode.splitVal)
  return splitval_;
}
void AdaptiveGridInterNode::set_splitval(double value) {
  set_has_splitval();
  splitval_ = value;
  // @@protoc_insertion_point(field_set:OptCAD.proto.AdaptiveGridInterNode.splitVal)
}

inline const AdaptiveGridInterNode* AdaptiveGridInterNode::internal_default_instance() {
  return &AdaptiveGridInterNode_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace OptCAD

// @@protoc_insertion_point(global_scope)
